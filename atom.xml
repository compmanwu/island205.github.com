<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[寸志]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://island205.com/"/>
  <updated>2015-11-08T18:08:45.000Z</updated>
  <id>http://island205.com/</id>
  
  <author>
    <name><![CDATA[寸志]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[谈谈如何组织线上的静态资源]]></title>
    <link href="http://island205.com/2015/11/09/how-to-organize-static-resource-on-line/"/>
    <id>http://island205.com/2015/11/09/how-to-organize-static-resource-on-line/</id>
    <published>2015-11-08T16:00:00.000Z</published>
    <updated>2015-11-08T18:08:45.000Z</updated>
    <content type="html"><![CDATA[<p>本文来自我在知乎 <a href="http://www.zhihu.com/question/37286611/answer/71391143" target="_blank" rel="external">前端打包如何在减少请求数与利用并行下载之间找到最优解？</a> 下的回答。</p>
<p>这可以是一个脑洞很大的问题，优化到极限是所有程序员的理想，但我觉得并不现实，也无必要。</p>
<h2 id="我经历过的一些方案">我经历过的一些方案</h2><p><strong>点评网</strong>：那是2013年，点评网的前端技术还算是比较前沿的。我们有异步的模块加载器 <a href="https://github.com/kaelzhang/neuron" target="_blank" rel="external">kaelzhang/neuron · GitHub</a>，有私有的包管理方案 <a href="https://github.com/cortexjs" target="_blank" rel="external">Cortex · GitHub</a>。我们几位技术的理想主义者，Kael、+1、 小马哥我们多次开会讨论前端模块化，前端加载器，前端性能优化的问题。当时的理想的方案是：</p>
<ul>
<li>代码全部 CommonJS 模块化；</li>
<li>采用<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">语义化版本 2.0.0</a> 标准，</li>
<li>线上异步加载模块；</li>
<li>服务器根据各种页面对模块的需求情况通过算法合理的 combo 这些返回给模块加载器。</li>
</ul>
<p>和题主的想法比较相近。虽然不太确定，但 1、2、3 是完成了，4 也许永远不会实现。我2013年已经离职，而 Kael、+1 不久前已经离职。翻翻点评页面上的代码（<a href="http://www.dianping.com/" target="_blank" rel="external">大众点评网</a> 右键查看源码）还有当年理想的痕迹：</p>
<p>combo 的配置输出：</p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
  <span class="keyword">var</span> __loaderCombo = </span></span><span class="expression">{
    '/<span class="end-block">/http</span>:/<span class="end-block">/www.dpfile.com</span><span class="end-block">/combos</span>/~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">promo</span>~<span class="variable">placeholder.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">placeholder.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">mbox.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">promo</span>~<span class="variable">mbox.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">biz</span>~<span class="variable">mkt.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">bulletin.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">mkt.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">tg-content.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">storage</span>~<span class="variable">local.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">storage</span>~<span class="variable">local-expire.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">mvp</span>~<span class="variable">tpl.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">dom</span>~<span class="variable">dimension.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">suggest.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">io</span>~<span class="variable">ajax.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">io</span>~<span class="variable">jsonp.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">util</span>~<span class="variable">cookie.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">util</span>~<span class="variable">queue.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">util</span>~<span class="variable">json.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">event</span>~<span class="variable">multi.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">event</span>~<span class="variable">live.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">switch</span>~<span class="variable">core.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">switch</span>~<span class="variable">conf.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">switch</span>~<span class="variable">tabswitch.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">switch</span>~<span class="variable">carousel.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">switch</span>~<span class="variable">autoplay.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">fx</span>~<span class="variable">tween.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">fx</span>~<span class="variable">easing.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">fx</span>~<span class="variable">css.js</span>,~<span class="variable">lib</span>~1<span class="variable">.</span>0~<span class="variable">fx</span>~<span class="variable">core.js</span>/8<span class="variable">b</span>8<span class="variable">f</span>8<span class="variable">f</span>355<span class="variable">aeac</span>43833<span class="variable">c</span>8<span class="variable">c</span>3<span class="variable">ce</span>9<span class="variable">c</span>141175,8<span class="variable">b</span>8<span class="variable">f</span>8<span class="variable">f</span>355<span class="variable">aeac</span>43833<span class="variable">c</span>8<span class="variable">c</span>3<span class="variable">ce</span>9<span class="variable">c</span>141175,<span class="variable">e</span>57178<span class="variable">e</span>2684<span class="variable">d</span>3<span class="variable">f</span>7<span class="variable">b</span>36<span class="variable">e</span>0<span class="variable">cc</span>50<span class="variable">abdeb</span>01<span class="variable">a</span>,755028<span class="variable">a</span>19<span class="variable">cabfa</span>057<span class="variable">e</span>417<span class="variable">a</span>7718<span class="variable">ededc</span>2,61103<span class="variable">b</span>741<span class="variable">ca</span>56<span class="variable">b</span>4712<span class="variable">da</span>46<span class="variable">f</span>5556<span class="variable">f</span>3907,350<span class="variable">a</span>5<span class="variable">fe</span>49<span class="variable">af</span>6<span class="variable">ab</span>08<span class="variable">f</span>1307<span class="variable">d</span>8<span class="variable">c</span>26<span class="variable">ff</span>343<span class="variable">d</span>,334<span class="variable">ea</span>339327782<span class="variable">c</span>798<span class="variable">b</span>62<span class="variable">b</span>8<span class="variable">a</span>7916<span class="variable">da</span>33,<span class="variable">fb</span>0922<span class="variable">bab</span>163860<span class="variable">af</span>76<span class="variable">cebf</span>35<span class="variable">fcf</span>2<span class="variable">ac</span>6,8602861<span class="variable">a</span>2<span class="variable">c</span>191<span class="variable">a</span>9959<span class="variable">f</span>183138<span class="variable">c</span>097790,463<span class="variable">c</span>113<span class="variable">fe</span>9572<span class="variable">f</span>1<span class="variable">ce</span>5<span class="variable">acbbff</span>67710250,681<span class="variable">c</span>5<span class="variable">b</span>24<span class="variable">a</span>9<span class="variable">a</span>215968286<span class="variable">adb</span>35<span class="variable">ea</span>9<span class="variable">a</span>1<span class="variable">b</span>4,<span class="variable">f</span>12<span class="variable">f</span>839642<span class="variable">deedcc</span>2<span class="variable">ef</span>8<span class="variable">e</span>2235<span class="variable">f</span>146031,<span class="variable">ea</span>3<span class="variable">b</span>7<span class="variable">ce</span>0<span class="variable">b</span>29712205015<span class="variable">c</span>66468<span class="variable">da</span>7<span class="variable">d</span>85,85362489<span class="variable">ccceac</span>3<span class="variable">fc</span>3303<span class="variable">ec</span>569<span class="variable">dd</span>2<span class="variable">b</span>74,08440<span class="variable">f</span>9945<span class="variable">a</span>0<span class="variable">f</span>99<span class="variable">cbbcadce</span>7<span class="variable">d</span>5<span class="variable">b</span>140<span class="variable">bf</span>,<span class="variable">afe</span>6182<span class="variable">c</span>4<span class="variable">f</span>181<span class="variable">e</span>2<span class="variable">d</span>419<span class="variable">ebec</span>8<span class="variable">c</span>0026<span class="variable">a</span>69,<span class="variable">f</span>000<span class="variable">da</span>58<span class="variable">a</span>69731<span class="variable">e</span>4<span class="variable">d</span>966<span class="variable">b</span>79<span class="variable">f</span>319<span class="variable">a</span>973<span class="variable">f</span>,<span class="variable">e</span>54951<span class="variable">fd</span>409<span class="variable">a</span>1<span class="variable">f</span>2680<span class="variable">a</span>457<span class="variable">e</span>395<span class="variable">b</span>90<span class="variable">dc</span>1,7820<span class="variable">a</span>44330<span class="variable">e</span>04<span class="variable">c</span>9718005<span class="variable">bfa</span>97<span class="variable">e</span>80<span class="variable">bc</span>8,649<span class="variable">a</span>5074<span class="variable">e</span>678<span class="variable">c</span>2<span class="variable">ca</span>97609<span class="variable">ade</span>4<span class="variable">c</span>68<span class="variable">ad</span>5<span class="variable">f</span>,577271<span class="variable">a</span>07070095<span class="variable">dc</span>9<span class="variable">c</span>4398<span class="variable">c</span>1056<span class="variable">b</span>735,643<span class="variable">e</span>258<span class="variable">aedf</span>04<span class="variable">b</span>4<span class="variable">bd</span>5919<span class="variable">ded</span>8263191<span class="variable">b</span>,9<span class="variable">aedd</span>735203<span class="variable">bac</span>14<span class="variable">d</span>3<span class="variable">da</span>0420<span class="variable">f</span>278<span class="variable">ee</span>8<span class="variable">b</span>,4<span class="variable">f</span>1<span class="variable">cd</span>478<span class="variable">d</span>938<span class="variable">e</span>4<span class="variable">ece</span>4<span class="variable">b</span>5<span class="variable">a</span>6<span class="variable">cb</span>53<span class="variable">b</span>83<span class="variable">b</span>02,<span class="variable">bb</span>9<span class="variable">c</span>320<span class="variable">f</span>46054<span class="variable">d</span>5277<span class="variable">a</span>3<span class="variable">aea</span>90<span class="variable">fd</span>37747,97<span class="variable">c</span>9<span class="variable">a</span>39<span class="variable">afa</span>1<span class="variable">a</span>5<span class="variable">d</span>4<span class="variable">bee</span>3<span class="variable">a</span>0<span class="variable">cfe</span>8<span class="variable">d</span>5989<span class="variable">f</span>3,7<span class="variable">e</span>42281<span class="variable">ab</span>447<span class="variable">ebdb</span>115<span class="variable">a</span>133<span class="variable">cc</span>38<span class="variable">cf</span>03<span class="variable">d</span>,183<span class="variable">b</span>08<span class="variable">c</span>14447<span class="variable">afc</span>24<span class="variable">ea</span>8435<span class="variable">a</span>7500<span class="variable">e</span>020,<span class="variable">d</span>322<span class="variable">a</span>81<span class="variable">f</span>5<span class="variable">d</span>82047<span class="variable">eb</span>2<span class="variable">b</span>98912<span class="variable">fe</span>53<span class="variable">c</span>609<span class="variable">.js</span>': [
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/promo</span><span class="end-block">/placeholder.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/placeholder.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/mbox.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/promo</span><span class="end-block">/mbox.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/biz</span><span class="end-block">/mkt.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/bulletin.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/mkt.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/tg-content.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/storage</span><span class="end-block">/local.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/storage</span><span class="end-block">/local-expire.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/mvp</span><span class="end-block">/tpl.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/dom</span><span class="end-block">/dimension.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/suggest.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/io</span><span class="end-block">/ajax.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/io</span><span class="end-block">/jsonp.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/util</span><span class="end-block">/cookie.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/util</span><span class="end-block">/queue.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/util</span><span class="end-block">/json.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/event</span><span class="end-block">/multi.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/event</span><span class="end-block">/live.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/switch</span><span class="end-block">/core.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/switch</span><span class="end-block">/conf.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/switch</span><span class="end-block">/tabswitch.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/switch</span><span class="end-block">/carousel.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/switch</span><span class="end-block">/autoplay.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/fx</span><span class="end-block">/tween.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/fx</span><span class="end-block">/easing.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/fx</span><span class="end-block">/css.js</span>',
      '<span class="end-block">/lib</span>/1<span class="variable">.</span>0<span class="end-block">/fx</span><span class="end-block">/core.js</span>'
    ],
    '/<span class="end-block">/http</span>:/<span class="end-block">/www.dpfile.com</span><span class="end-block">/combos</span>/~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">index</span>~<span class="variable">city.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">datepicker</span>~<span class="variable">superdatepicker.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">datepicker</span>~<span class="variable">supercalendar.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">datepicker</span>~<span class="variable">calendarmodel.js</span>/10<span class="variable">e</span>567965240627<span class="variable">f</span>31<span class="variable">adeb</span>03<span class="variable">a</span>0<span class="variable">b</span>5<span class="variable">bb</span>9<span class="variable">d</span>,<span class="variable">d</span>401<span class="variable">bfe</span>3<span class="variable">cb</span>080<span class="variable">f</span>56<span class="variable">d</span>3<span class="variable">dd</span>5477496085<span class="variable">ce</span>,<span class="variable">d</span>8<span class="variable">f</span>8<span class="variable">da</span>0738<span class="variable">a</span>40<span class="variable">c</span>79<span class="variable">c</span>6<span class="variable">a</span>6033059<span class="variable">fc</span>4<span class="variable">f</span>8<span class="variable">a</span>,<span class="variable">f</span>06<span class="variable">dc</span>4<span class="variable">c</span>4<span class="variable">bf</span>7930<span class="variable">ab</span>9<span class="variable">e</span>2<span class="variable">d</span>04<span class="variable">b</span>347<span class="variable">c</span>43684<span class="variable">.js</span>': [
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/index</span><span class="end-block">/city.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/datepicker</span><span class="end-block">/superdatepicker.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/datepicker</span><span class="end-block">/supercalendar.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/datepicker</span><span class="end-block">/calendarmodel.js</span>'
    ],
    '/<span class="end-block">/http</span>:/<span class="end-block">/www.dpfile.com</span><span class="end-block">/combos</span>/~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">booking</span>~<span class="variable">common</span>~<span class="variable">datepicker</span>~<span class="variable">superdatepicker.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">booking</span>~<span class="variable">common</span>~<span class="variable">datepicker</span>~<span class="variable">supercalendar.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">booking</span>~<span class="variable">common</span>~<span class="variable">datepicker</span>~<span class="variable">calendarmodel.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">booking</span>~<span class="variable">mainbookingplugin.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">booking</span>~<span class="variable">reserveregion.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">activity</span>~<span class="variable">vdperweekstarplugin.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">hotel</span>~<span class="variable">index</span>~<span class="variable">hotel-shortcut.js</span>,~<span class="variable">s</span>~<span class="variable">j</span>~<span class="variable">app</span>~<span class="variable">main</span>~<span class="variable">app-</span>2<span class="variable">d.js</span><span class="end-block">/b</span>3<span class="variable">e</span>3<span class="variable">cb</span>309221<span class="variable">bc</span>1<span class="variable">b</span>22<span class="variable">a</span>8840110270109,<span class="variable">b</span>5<span class="variable">eee</span>190<span class="variable">bf</span>95<span class="variable">f</span>12<span class="variable">f</span>9<span class="variable">de</span>6<span class="variable">d</span>7<span class="variable">c</span>22<span class="variable">ac</span>69122,<span class="variable">f</span>06<span class="variable">dc</span>4<span class="variable">c</span>4<span class="variable">bf</span>7930<span class="variable">ab</span>9<span class="variable">e</span>2<span class="variable">d</span>04<span class="variable">b</span>347<span class="variable">c</span>43684,1<span class="variable">b</span>1894<span class="variable">cf</span>4901<span class="variable">ba</span>0<span class="variable">a</span>3<span class="variable">d</span>9303<span class="variable">a</span>43<span class="variable">b</span>2977<span class="variable">d</span>4,9<span class="variable">aa</span>72<span class="variable">d</span>14<span class="variable">ba</span>3<span class="variable">ca</span>95811990<span class="variable">f</span>050<span class="variable">e</span>1<span class="variable">bb</span>11<span class="variable">c</span>,79<span class="variable">cffb</span>62<span class="variable">b</span>22<span class="variable">c</span>077<span class="variable">b</span>849431<span class="variable">ba</span>867<span class="variable">e</span>8<span class="variable">b</span>49,<span class="variable">ab</span>65<span class="variable">fdf</span>8<span class="variable">fa</span>47<span class="variable">a</span>417<span class="variable">d</span>9<span class="variable">e</span>87712210238<span class="variable">df</span>,<span class="variable">eea</span>8<span class="variable">ab</span>135<span class="variable">c</span>6<span class="variable">a</span>3<span class="variable">be</span>13<span class="variable">b</span>563<span class="variable">abf</span>9<span class="variable">f</span>3<span class="variable">b</span>706<span class="variable">c.js</span>': [
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/booking</span><span class="end-block">/common</span><span class="end-block">/datepicker</span><span class="end-block">/superdatepicker.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/booking</span><span class="end-block">/common</span><span class="end-block">/datepicker</span><span class="end-block">/supercalendar.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/booking</span><span class="end-block">/common</span><span class="end-block">/datepicker</span><span class="end-block">/calendarmodel.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/booking</span><span class="end-block">/mainbookingplugin.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/booking</span><span class="end-block">/reserveregion.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/activity</span><span class="end-block">/vdperweekstarplugin.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/hotel</span><span class="end-block">/index</span><span class="end-block">/hotel-shortcut.js</span>',
      '<span class="end-block">/s</span><span class="end-block">/j</span><span class="end-block">/app</span><span class="end-block">/main</span><span class="end-block">/app-</span>2<span class="variable">d.js</span>'
    ]
  }</span><span class="xml"><span class="javascript">
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span>
</code></pre><p>著名的 <a href="http://www.dpfile.com/x_x/version.min.v1446634429846.js" target="_blank" rel="external">version.js</a>。</p>
<p><strong>Teambition</strong>：我 2013年底加入，大型 SPA 应用。整个应用使用 RequireJS 模块化。本地开发时异步加载，超过500个小的资源文件，页面刷新出来可能要10s 以上。所以调试一直是痛点。然，对于线上运行时优化特别少，三个阶段：</p>
<ul>
<li>全部打包成一个 JS 文件；</li>
<li>分成两个 JS 文件，RequireJS 线上运行时 <a href="https://github.com/jrburke/almond" target="_blank" rel="external">jrburke/almond · GitHub +</a> 第三方依赖一个文件，业务代码一个文件；</li>
<li><p>三个文件，刚刚又看了一下代码：</p>
  <script src="https://dn-st.teambition.net/libs/bundle/js/index.97e98c88.js"></script>
  <script src="https://dn-st.teambition.net/teambition/js/deps.7a49b762.js"></script>
  <script src="https://dn-st.teambition.net/teambition/js/app.f7e98219.js"></script>

</li>
</ul>
<p>具体细节我已经不清楚了，但很可能 RequireJS 线上运行时 + 必须尽快执行的代码。</p>
<p><strong>陆金所</strong>：首先，这是三家公司里面相对比较粗糙比较无脑的方案。</p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"//static.lufaxcdn.com/lufax-public/jquery/jquery.7ebf933b.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"//static.lufaxcdn.com/lufax-components/lufax-components.726a6c1b.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"//static.lufaxcdn.com/lufax-public/lufax-lib/lufax-lib.1413b941.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"//static.lufaxcdn.com/lufax-public/lufax-public/lufax-public.972c53c4.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>

<span class="comment">&lt;!-- &lt;script type="text/javascript" src="http://hq.sinajs.cn/list=s_sh000001"&gt;&lt;/script&gt; --&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"https://static.lufaxcdn.com/home/index/8e0a02698e.index.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"//static.lufaxcdn.com/lufax-public/statistic/statistic.69b37206.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><p><strong>一个页面中的 JavaScript 文件布局（CSS 也是类似，略去不表）</strong>：</p>
<ul>
<li>jQuery，对，我们基本上都还是很基础的 jQuery 代码</li>
<li>公共组件，接下来的三个都是，只是更具不同的用途和级别做了划分</li>
<li>页面的业务 JavaScript：index.js</li>
<li>其他一些统计组件</li>
</ul>
<p><strong>当然这是表象，那我们代码的背后有什么模块化吗</strong>？</p>
<ul>
<li>代码文件都是用立即执行的函数表达式（Immediately-invoked function expression） 包裹的吗？不是！</li>
<li>SeaJS RequireJS AMD CMD？不是！<blockquote>
<p>备注：有两三个项目采用 RequireJS，PC 网站端的项目超过 15 个。</p>
</blockquote>
</li>
<li>ES6 Module？不是！</li>
<li><strong>每个页面的业务代码基本上就是一个文件，采用全局命名空间实现组件化</strong>。</li>
</ul>
<blockquote>
<p>备注：虽然有两三个项目用了 RequireJS，代码也是分模块开发的，线上运行并不是异步加载，而是按照依赖关系，每个页面合并成一个单独页面；也就是说，在线上，两个页面间的 JS 文件里，包含了很多相同的代码。</p>
</blockquote>
<h2 id="这些方案间的比较：">这些方案间的比较：</h2><p>点评网是三者中最牛逼，最理想的。但做起的复杂度超乎想象，这也可能是目前还没有完全实现的原因。可以看看 <a href="https://www.tmall.com/" target="_blank" rel="external">天猫tmall.com—上天猫，就够了</a> （kissy）、 <a href="https://www.alipay.com/" target="_blank" rel="external">支付宝 知托付！</a>（sea.js） 好似都是这种风格的。</p>
<p>Teambition 算是比较现实，比较与国际接轨的方案，毕竟是 SPA 应用。但可以看到，是这三个网站中打开速度最慢的。所有业务驱动的代码都在 JavaScript 中（HTML + 业务逻辑），有两种可选方案：</p>
<ul>
<li>拆分为多个 SPA（推荐这个）</li>
<li>适当做一些异步加载</li>
</ul>
<p>陆金所：开发（模块化啥的根本不需要知道，什么循环依赖根本不会出现）无脑，打包（grunt/gulp）无脑，访问网页看看，慢么，也不慢。</p>
<h2 id="一些观点和结论：">一些观点和结论：</h2><p><strong>模块化开发是趋势</strong>：分而治之，是不变的道理。无论是传统网页（点评网、陆金所等）还是 SPA 应用，都需要借力模块化来保持代码的鲁棒性。解耦，独立，不会互相影响。</p>
<p><strong>异步加载按需加载本身有点跑偏的</strong>：从 LAB.js 开始，各种各样的加载器都在追求加载性能，异步加载。希望可以加快页面的加载速度。分模块加载，异步加载的好处其实并没有那么明显，模块太多，或者异步加载，整体的加载实现反而延长。虽说 HTTP 2.0 能有效减少多个小文件加载消耗在网络上的时间，ES6 也原生提供 <a href="https://people.mozilla.org/~jorendorff/js-loaders/Loader.html" target="_blank" rel="external">Loader</a> 的支持，但毕竟现在还没推广，效果也要实际使用才知道。</p>
<p><strong>合理分组，同步加载，用好浏览器缓存和 CDN 应该可以解决大部分问题</strong>：区分开发运行时和线上运行时，开发时使用模块化，异步加载器大幅提升开发体验。线上按照代码更新频度和作用合理分组，合并压缩代码，同步加载三到五个文件。配置好静态服务器，使用 CDN，充分利用浏览器缓存和 CDN，静态资源就不会是性能的瓶颈了。</p>
<p>再说一句，</p>
<blockquote>
<p>任何不以场景为前提的设计都是耍流氓，任何太不切实际的理想终将覆灭。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文来自我在知乎 <a href="http://www.zhihu.com/question/37286611/answer/71391143" target="_blank" rel="external">前端打包如何在减少请求数与利用并行下载之间找到最优解？</a> ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[为什么我讨厌 Static Zombie]]></title>
    <link href="http://island205.com/2015/09/19/why-i-hate-static-zombie/"/>
    <id>http://island205.com/2015/09/19/why-i-hate-static-zombie/</id>
    <published>2015-09-18T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:09.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>我说有种静态资源叫做：static zombie——引用的地方添文件名加了时间戳或者 MD5，源码中又找不到这类文件，但测试或者生产环境上又有这个文件，不过是经过压缩的，一般这类文件时间都比较久远。深深地刺痛着我。</p>
</blockquote>
<p>前两天发了这条微博，目的就是吐槽一下我司静态文件管理的混乱（历史原因就是很多 Web 项目之前不是由前端负责的）。造了个词 <strong>Static Zombie</strong>。在重构这些项目的时候，我发现源码中很多地方的源码就像下面这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://example.cdn.com/jquery-1.7.1/20141023.jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>http://example.cdn.com/</code> 只是一个示例。</p>
</blockquote>
<p>这些静态文件的引用包含如下特点：</p>
<ul>
<li>文件都是从测试/线上环境中获取的；</li>
<li>这些文件在任何源码仓库中都找不到；</li>
<li>带版本号（日期或者 MD5 值）；</li>
<li>javascript/css/image 都有；</li>
<li>脚本和样式都是经过压缩的；</li>
</ul>
<p>看到这些文件，我只想说：</p>
<blockquote>
<p>我操，我怎么重构？</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/df8f8722jw1egbuyyxbhmj20bo0ccjsi.jpg" alt=""></p>
<p>完全没法改啊，尤其是 css 文件，请求了一看，都是压缩的，而且还引用了很多背景图片。</p>
<p>这就是所谓的 Static Zombie，这种文件没法改，不能更新，也不能删。无论我愿不愿意，它们就在那里，和尸体差不多！</p>
<p>重要的事情说三遍：</p>
<p><strong>千万不要写死版本号！千万不要直接引用 CDN 上的地址！千万通过自动化（不要手动）地工具来管理静态资源！</strong><br><strong>千万不要写死版本号！千万不要直接引用 CDN 上的地址！千万通过自动化（不要手动）地工具来管理静态资源！</strong><br><strong>千万不要写死版本号！千万不要直接引用 CDN 上的地址！千万通过自动化（不要手动）地工具来管理静态资源！</strong></p>
<blockquote>
<p>否则满满都是坑！</p>
</blockquote>
<p>几点关于静态资源管理的心得：</p>
<ul>
<li>使用 MD5 而不是时间戳；</li>
<li>开发运行时和线上运行时分开——开发引用项目的中的文件，上线时则环境带版本号的 CDN 文件；</li>
<li>全自动化的管理静态资源，任何时候都不要图方便手动写死版本号，或者手动上传到 CDN，然后在项目直接使用 CDN 上的文件。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>我说有种静态资源叫做：static zombie——引用的地方添文件名加了时间戳或者 MD5，源码中又找不到这类文件，但测试或者生产环境上又有这个文件，不过是经过压缩的，一般这类文件时间都比较久远。深深地刺痛着我。</p>
</blockquote]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的 RSS 订阅列表]]></title>
    <link href="http://island205.com/2015/06/06/my-rss-list/"/>
    <id>http://island205.com/2015/06/06/my-rss-list/</id>
    <published>2015-06-05T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>可以到<a href="https://github.com/island205/island205.github.com/issues/11" target="_blank" rel="external">这里</a>复制，存储为 <code>xml</code> 格式。</p>
</blockquote>
<p>通常会碰到下面两个问题：</p>
<ul>
<li>我不知道目前在流行些什么新技术，也不知道从哪里获取？</li>
<li>你们<a href="http://zhuanlan.zhihu.com/FrontendMagazine" target="_blank" rel="external">《专栏》</a>的文章都是从哪里找的？</li>
</ul>
<p>我的回答就是我一直在维护一个自己 RSS 列表，订阅了国内外一些有意思的前端（包括 Node.js）相关的列表。</p>
<p>大概是六年前我就开始使用 Google Reader （记得还是受到女友的启蒙）订阅一些相关的资讯，后来慢慢集中到技术上来。毕业后开始从事专业的前端工作，业余时间（地铁上、路上）我都在用 Android 上的 Google Reader 浏览资讯。终于有一天感觉看得好累，感觉是在逼着自己阅读一样，我就基本删掉了非前端相关的、更新过于平凡的源。逐渐就形成了下面会给出的一个列表。</p>
<p>2013年1月11日，RSS 的发明者之一<a href="http://movie.douban.com/celebrity/1342002/" target="_blank" rel="external">亚伦·斯沃茨</a>自杀身亡；2013年7月1日，<a href="http://en.wikipedia.org/wiki/Google_Reader" target="_blank" rel="external">Google Reader 关闭</a>。但 RSS 并没有灭亡。在这之前就  <a href="http://www.feedly.com" target="_blank" rel="external">feedly</a> 这个阅读体验非常不错的可以连接 Google Reader 的阅读器，但试用和对比之后，我还是切换到了 <a href="http://digg.com/reader" target="_blank" rel="external">Digg Reader</a>，体验与 Google Reader 一致，也有移动客户端。</p>
<p>基本每天上班的第一件事就是打开 Digg Reader，浏览昨天前端又发生了什么事情，除了特别忙或者特别烦的日子以外。后来还用上了 <a href="https://getpocket.com/a/" target="_blank" rel="external">Pocket</a>，一款精读应用，Digg Reader 作为资讯快速浏览，把需要精读的文章添加到 Pocket 中，利用碎片时间精读。甚至突击 AngularJS 技术的那段时间，我一口气添加了上百篇相关的文章去阅读。很多时候确实需要写文章才能深入浅出，鞭辟入里；文章写作不死，自然 RSS 也不死。</p>
<p>我喜欢 Digg Reader 和 Pocket，享受阅读技术文章，学习新知识的乐趣。下面我挑出一些我频繁加入精读的源：</p>
<h4 id="日报周报">日报周报</h4><p><strong><a href="http://us1.campaign-archive.com/feed?u=0618f6a79d6bb9675f313ceb2&amp;id=596bcf37c5" target="_blank" rel="external">JavaScript Weekly Archive Feed</a></strong></p>
<blockquote>
<p>JavaScript 周报。</p>
</blockquote>
<p><strong><a href="http://html5weekly.com" target="_blank" rel="external">HTML5 Weekly Archive Feed</a> </strong></p>
<blockquote>
<p>HTML5 周报。</p>
</blockquote>
<p><strong><a href="http://dailyjs.com/" target="_blank" rel="external">DailyJS</a></strong></p>
<blockquote>
<p>每天几盘 JavaScript 小菜！</p>
</blockquote>
<p><strong><a href="http://www.75team.com/weekly/issue111.html" target="_blank" rel="external">奇舞周刊</a></strong></p>
<blockquote>
<p>有一些不错的资讯，不过主要还是看看专栏的收录情况；</p>
</blockquote>
<h4 id="入门实践">入门实践</h4><p><strong><a href="http://www.sitepoint.com/" target="_blank" rel="external">sitepint</a></strong></p>
<blockquote>
<p>各种 Getting Start，各种带实例的实践。</p>
</blockquote>
<p><strong><a href="http://net.tutsplus.com/" target="_blank" rel="external">Nettuts+</a></strong></p>
<blockquote>
<p>同样各种 Getting Start，各种带实例的实践。</p>
</blockquote>
<p><strong><a href="http://demosthenes.info" target="_blank" rel="external">demosthenes.info</a></strong></p>
<blockquote>
<p>最新 CSS/CSS3 实践资讯。</p>
</blockquote>
<h4 id="大神">大神</h4><p><strong><a href="http://blog.izs.me/" target="_blank" rel="external">blog.izs.me</a></strong></p>
<blockquote>
<p>博主是 npm 的作者 <a href="https://github.com/isaacs" target="_blank" rel="external"> Isaac Z. Schlueter</a>，关注 Node.js 必读博客之一。</p>
</blockquote>
<p><strong><a href="http://www.tjholowaychuk.com/" target="_blank" rel="external">TJ Holowaychuk</a></strong></p>
<blockquote>
<p>TJ 的博客，很少更新，你会发现，TJ 原来喜欢搞艺术创作！</p>
</blockquote>
<h4 id="技术娱乐">技术娱乐</h4><p><strong><a href="http://www.vaikan.com/" target="_blank" rel="external">外刊IT评论网</a></strong></p>
<blockquote>
<p>技术小品，你懂的，常常会有人一大早上就看到我在那边对着屏幕发笑，应该就是因为它。最近不更新了还是 RSS 地址换了？</p>
</blockquote>
<p>这里列出的只是我最常加入精读的部分。列表中还有其他很多源时长也有很多有用的文章。当然也有一些奇怪的订阅。</p>
<h4 id="奇怪的订阅">奇怪的订阅</h4><p><strong><a href="http://island205.com/">island205.com</a></strong></p>
<blockquote>
<p>本博的 RSS。</p>
</blockquote>
<p><strong><a href="http://www.ppurl.com/" target="_blank" rel="external">皮皮书屋</a></strong></p>
<blockquote>
<p>皮皮书屋更新列表，但现在已经无用了。记得大学那会儿，我还订阅过学校图书馆新入计算机图书列表。</p>
</blockquote>
<p><strong><a href="http://www.douban.com/people/compmanwu/" target="_blank" rel="external">咸蛋 的收藏</a></strong></p>
<blockquote>
<p>这是我女朋友豆瓣的收藏 RSS，常常可以看到她又看了什么书啦，电影啦，全方位关注 GF 思想动态。</p>
</blockquote>
<p><strong><a href="http://blog.qhm123.com/" target="_blank" rel="external">鸣的博客</a></strong></p>
<blockquote>
<p>已经打不开了，但是有些感伤，几年前一度是一位在线的技术小伙伴，许久不联系了。</p>
<p>可以到<a href="https://github.com/island205/island205.github.com/issues/11" target="_blank" rel="external">这里</a>复制，存储为 <code>xml</code> 格式。</p>
</blockquote>
<p>我公开的原因有三个：</p>
<ul>
<li>有人要每次给，不如索性公开，谁要就贴这篇文章；</li>
<li>公开让喜欢的人受益；</li>
<li>这些 RSS 列表对我的受益越来越小了。无论阅读再多的文章，都只是知了，但并不知道，之后会把更多的时间放到实践和创造上！</li>
</ul>
<blockquote>
<p>如果对你有用，就请取走吧！</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>可以到<a href="https://github.com/island205/island205.github.com/issues/11" target="_blank" rel="external">这里</a>复制，存储为 <code>x]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试驱动编写 React 简易计算器]]></title>
    <link href="http://island205.com/2015/06/04/write-caculator-with-reactjs-and-tdd/"/>
    <id>http://island205.com/2015/06/04/write-caculator-with-reactjs-and-tdd/</id>
    <published>2015-06-03T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本文的<a href="https://github.com/island205/ReactUnitTesting/tree/master/Caculator" target="_blank" rel="external">源码</a>和 <a href="http://island205.com/ReactUnitTesting/Caculator/">DEMO</a> 都可以点击链接找到。</p>
</blockquote>
<p>在5月30号 Teambition 组织的 React 的分享会中，我分享了如何对 React 组件进行单元测试，本文将做一些介绍和记录，以飨读者。</p>
<h3 id="单元测试的重要性">单元测试的重要性</h3><blockquote>
<p>此处省略十万字。</p>
</blockquote>
<h3 id="模块范式和测试方案">模块范式和测试方案</h3><p>React 的开发并不脱离前端的开发范式。下表总结了 React 开发各个环节的一些可选方案。</p>
<!--
<table>
  <thead>
    <tr>
      <th>Code</th>
      <th>Runtime</th>
      <th>Unit Test</th>
      <th>Test Runner</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Global</td>
      <td>In Order</td>
      <td rowspan=4>
        Jasmine
        <br>
        Mocha
        <br>
        <br>
        Tools:
          <br>
          Jasmine-react
          <br>
          Chance
        </td>
      <td rowspan=4>
        Manual
        <br>
        Karma
      </td>
    </tr>
    <tr>
      <td>AMD</td>
      <td>RequireJS</td>
    </tr>
    <tr>
      <td>CommonJS</td>
      <td>
          Browserify
          <br>
          Webpack
          <br>
          RequireJS
      </td>
    </tr>
    <tr>
      <td>ES6 Module</td>
      <td>
          Browserify
          <br>
          Webpack
          <br>
          RequireJS
      </td>
    </tr>
    <tr>
      <td>CommonJS</td>
      <td colspan=3>Jest</td>
    </tr>
  </tbody>
</table>
-->
<table> <thead> <tr> <th>Code</th> <th>Runtime</th> <th>Unit Test</th> <th>Test Runner</th> </tr> </thead> <tbody> <tr> <td>Global</td> <td>In Order</td> <td rowspan="4"> Jasmine <br> Mocha <br> <br> Tools: <br> Jasmine-react <br> Chance </td> <td rowspan="4"> Manual <br> Karma </td> </tr> <tr> <td>AMD</td> <td>RequireJS</td> </tr> <tr> <td>CommonJS</td> <td> Browserify <br> Webpack <br> RequireJS </td> </tr> <tr> <td>ES6 Module</td> <td> Browserify <br> Webpack <br> RequireJS </td> </tr> <tr> <td>CommonJS</td> <td colspan="3">Jest</td> </tr> </tbody> </table>

<h4 id="模块范式">模块范式</h4><p>目前前端通常有四种代码的组织范式。</p>
<ul>
<li><strong>Global</strong>：即无论是 React 还是 JSXTransformer，包括 业务代码都顺序的引入到页面中。通过全局对象来实现模块的共享。即如 <a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">React 入门</a> 这样的例子；</li>
<li><strong>AMD</strong>：我们也可以在 AMD 的项目中使用 React，AMD 已经是一种非常成熟的方案，而且社区对 AMD 的支持也非常广泛。我们可以把 Flux 中的各个要件都写成 AMD 模块，然后异步加载到前端配合使用；</li>
<li><strong>CommonJS</strong>：CommonJS 是 React 项目本身代码组织的方式，也是 React 社区许多组件的模块化方案；基于 CommonJS；然后是用 Browserify 和 Webpack 来搭建运行时，当然通过一些工具转化成 AMD 模块也行；</li>
<li><strong>ES6 Module</strong>：编写未来的模块，通过 babel 等工具转化成现在可用的模块。</li>
</ul>
<h4 id="测试用例">测试用例</h4><p>测试用例代码必须依附于开发范式，无论选择组织范式，代码必须都是分模块的（分文件、分模块），这样测试用例也可以分模块细粒度的编写。至于说基于何种测试框架，前端推荐使用 Jasmine，再加上一些测试的辅助工具即可，比如做 spy、mock 等。除此之外我们可以使用像 Karma 这样 Testing Runner，最大限度地排除开发过程中的重复劳动。</p>
<h4 id="Jest">Jest</h4><p>Jest 是 Facebook 打造的无脑的 CommonJS 模块测试框架。优点如下：</p>
<ul>
<li>熟悉，基于 Jasmine；</li>
<li>轻量，一个待测试模块文件，一个测试文件，命令行就可以跑，无需浏览器；</li>
<li>内置 mock 方案，自动 mock 所有模块；</li>
</ul>
<p>但，跑了几个官方的例子，有的不通，Github 上看说是 <code>jsdom</code> 的问题，必须使用 <code>0.10.x</code> 版的 node。呵呵，还是使用小而美的组合比较靠谱。而且 Jest 只能用来测试 CommonJS 范式的代码。</p>
<h4 id="ES6_+_Webpack_+_Jasmine_+_Karma_组合">ES6 + Webpack + Jasmine + Karma 组合</h4><p>我选择了 ES6 + Webpack + Jasmine + Karma 组合。</p>
<!--
<table>
  <thead>
    <tr>
      <th>Code</th>
      <th>Runtime</th>
      <th>Unit Test</th>
      <th>Test Runner</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Global</td>
      <td>In Order</td>
      <td rowspan=4>
        <span style="font-weight: bold; color: green;">Jasmine</span>
        <br>
        Mocha
        <br>
        <br>
        Tools:
          <br>
          Jasmine-react
          <br>
          Chance
        </td>
      <td rowspan=4>
        Manual
        <br>
        <span style="font-weight: bold; color: green;">Karma</span>
      </td>
    </tr>
    <tr>
      <td>AMD</td>
      <td>RequireJS</td>
    </tr>
    <tr>
      <td>CommonJS</td>
      <td>
          Browserify
          <br>
          Webpack
          <br>
          RequireJS
      </td>
    </tr>
    <tr>
      <td style="font-weight: bold; color: green;">ES6 Module</td>
      <td>
          Browserify
          <br>
          <span style="font-weight: bold; color: green;">Webpack</span>
          <br>
          RequireJS
      </td>
    </tr>
    <tr>
      <td>CommonJS</td>
      <td colspan=3>Jest</td>
    </tr>
  </tbody>
</table>
-->
<table> <thead> <tr> <th>Code</th> <th>Runtime</th> <th>Unit Test</th> <th>Test Runner</th> </tr> </thead> <tbody> <tr> <td>Global</td> <td>In Order</td> <td rowspan="4"> <span style="font-weight: bold; color: green;">Jasmine</span> <br> Mocha <br> <br> Tools: <br> Jasmine-react <br> Chance </td> <td rowspan="4"> Manual <br> <span style="font-weight: bold; color: green;">Karma</span> </td> </tr> <tr> <td>AMD</td> <td>RequireJS</td> </tr> <tr> <td>CommonJS</td> <td> Browserify <br> Webpack <br> RequireJS </td> </tr> <tr> <td style="font-weight: bold; color: green;">ES6 Module</td> <td> Browserify <br> <span style="font-weight: bold; color: green;">Webpack</span> <br> RequireJS </td> </tr> <tr> <td>CommonJS</td> <td colspan="3">Jest</td> </tr> </tbody> </table>

<p>ES6 Module，编写未来的代码，相信不久的将来 React 也会切换到 ES6 Module 上来。使用 Webpack 来 bundle 代码实现运行时，作为工具可以随时替换，如果之后有更好的工具就可以换掉。Jasmine 和 Karma 就不用细说了。</p>
<h3 id="开始">开始</h3><p>我们的目标（也是最终结果）：</p>
<p><img src="http://ntu.so/di/GXMSJ/Caculator.png" alt="React Caculator"></p>
<p>拆解成三个模块来实现这个计算器：</p>
<ul>
<li>Caculator.js：主界面，包括计算结果显示屏；</li>
<li>Button.js：每一个按钮；</li>
<li>Parser.js：用来解析用户的输入流（2+1=+3=5+1-…），产生结果，本质是一个状态机。</li>
</ul>
<h4 id="搭建_TDD_环境">搭建 TDD 环境</h4><p>新建目录，添加文件如下：</p>
<pre><code>├── src
│   ├── Button<span class="class">.js</span>
│   ├── Button<span class="class">.less</span>
│   ├── Caculator<span class="class">.js</span>
│   ├── Caculator<span class="class">.less</span>
│   ├── Parser<span class="class">.js</span>
├── test
│   ├── specs
│   │   ├── Button<span class="class">.spec</span><span class="class">.js</span>
│   │   ├── Caculator<span class="class">.spec</span><span class="class">.js</span>
│   │   └── Parser<span class="class">.spec</span><span class="class">.js</span>
│   └── test-main<span class="class">.js</span>
├── package<span class="class">.json</span>
├── karma<span class="class">.conf</span><span class="class">.js</span>
└── webpack<span class="class">.config</span><span class="class">.js</span>
</code></pre><h5 id="karma-conf-js">karma.conf.js</h5><p>该文件通过 <code>karma init</code> 生成，然后做一些简单修改，添加 <code>karma-webpack</code> 插件把 <code>test/test-main.js</code> bundle 成一个可运行在浏览器中的测试文件：</p>
<pre><code><span class="comment">// 监听文件变化，重新运行测试</span>
<span class="string">files:</span> [
  <span class="comment">// included: false 为不包含这些文件到浏览器中</span>
  {<span class="string">pattern:</span> <span class="string">'src/*.js'</span>, <span class="string">included:</span> <span class="literal">false</span>},
  {<span class="string">pattern:</span> <span class="string">'src/*.less'</span>, <span class="string">included:</span> <span class="literal">false</span>},
  {<span class="string">pattern:</span> <span class="string">'test/specs/**/*.js'</span>, <span class="string">included:</span> <span class="literal">false</span>},
  <span class="string">'test/test-main.js'</span>
],
<span class="comment">// ...</span>
<span class="string">preprocessors:</span> {
  <span class="string">'test/test-main.js'</span>: [<span class="string">'webpack'</span>]
},
<span class="label">
webpack:</span> {
<span class="label">  devtool:</span> <span class="string">'inline-source-map'</span>,
<span class="label">  module:</span> {
<span class="label">    loaders:</span> [
      { <span class="string">test:</span> <span class="regexp">/\.js$/</span>, <span class="string">loader:</span> <span class="string">'babel-loader'</span> },
      { <span class="string">test:</span> <span class="regexp">/\.less$/</span>, <span class="string">loader:</span> <span class="string">"style!css!less"</span> }
    ]
  }
}
<span class="label">
webpackMiddleware:</span> {
<span class="label">    noInfo:</span> <span class="literal">true</span>,
<span class="label">    devtool:</span> <span class="string">"#inline-source-map"</span>
},
<span class="label">
plugins:</span> [
    require(<span class="string">"karma-webpack"</span>),
    require(<span class="string">'karma-jasmine'</span>),
    require(<span class="string">'karma-chrome-launcher'</span>)
]
</code></pre><h5 id="test-main-js">test-main.js</h5><p>ES6 module，加入测试用例。</p>
<pre><code><span class="keyword">import</span> <span class="string">'./specs/Button.spec'</span>
<span class="keyword">import</span> <span class="string">'./specs/Caculator.spec'</span>
<span class="keyword">import</span> <span class="string">'./specs/Parser.spec'</span>
</code></pre><h5 id="Caculator-spec-js">Caculator.spec.js</h5><p>首先编写 Caculator 的测试用例：</p>
<pre><code><span class="keyword">import</span> React from <span class="string">'react/addons'</span>
<span class="keyword">import</span> Caculator from <span class="string">'../../src/Caculator'</span>

<span class="keyword">var</span> TestUtils = React.addons.TestUtils

describe(<span class="string">'Caculator'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
  <span class="keyword">var</span> caculator

  beforeEach(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    caculator = TestUtils.renderIntoDocument(&lt;Caculator /&gt;)
  })

  it(<span class="string">'should display a caculator'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="keyword">var</span> divs = TestUtils.scryRenderedDOMComponentsWithTag(caculator, <span class="string">'div'</span>)
    expect(divs.length).toBe(<span class="number">3</span>)
    <span class="keyword">var</span> as = TestUtils.scryRenderedDOMComponentsWithTag(caculator, <span class="string">'a'</span>)
    expect(as.length).toBe(<span class="number">18</span>)
  })
})
</code></pre><blockquote>
<p><strong>TestUtils.renderIntoDocument</strong> 较于 <strong>React.render</strong> 的优点在于，并不会把组件渲染到页面上，这样测试用例之间不会互相污染。<code>TestUtils</code> 多个像 <code>scryRenderedDOMComponentsWithTag</code> 这样的方法，便于你在 React 组件中查找子对象（可以是标记名、组件名等）。</p>
</blockquote>
<h5 id="Caculator-js">Caculator.js</h5><p>首先编写一个简单的 React 组件：</p>
<pre><code><span class="pi">"use strict"</span>;

import <span class="string">'./Caculator.less'</span>

export <span class="keyword">default</span> React.createClass({
  render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>)
  }
})</span>
</code></pre><p>运行 <code>karma start</code>，运行测试用例：</p>
<pre><code>$ karma start
INFO [karma]: Karma v0<span class="number">.12</span><span class="number">.33</span> server started <span class="keyword">at</span> <span class="keyword">http</span>://localhost:<span class="number">9876</span>/
INFO [launcher]: Starting browser Chrome
INFO [Chrome <span class="number">43.0</span><span class="number">.2357</span> (Mac OS X <span class="number">10.10</span><span class="number">.4</span>)]: Connected <span class="command"><span class="keyword">on</span> <span class="title">socket</span> <span class="title">SQQx_6CxC3UHjooVPFk7</span> <span class="title">with</span> <span class="title">id</span> <span class="title">86084967</span></span>
INFO [karma]: Delaying execution, these browsers are <span class="operator">not</span> ready: Chrome <span class="number">43.0</span><span class="number">.2357</span> (Mac OS X <span class="number">10.10</span><span class="number">.4</span>)
Chrome <span class="number">43.0</span><span class="number">.2357</span> (Mac OS X <span class="number">10.10</span><span class="number">.4</span>) Caculator should display <span class="operator">a</span> caculator FAILED
  Expected <span class="number">1</span> <span class="built_in">to</span> be <span class="number">3.</span>
  Expected <span class="number">0</span> <span class="built_in">to</span> be <span class="number">18.</span>
Chrome <span class="number">43.0</span><span class="number">.2357</span> (Mac OS X <span class="number">10.10</span><span class="number">.4</span>): Executed <span class="number">1</span> <span class="operator">of</span> <span class="number">1</span> (<span class="number">1</span> FAILED) (<span class="number">0</span> <span class="built_in">secs</span> / <span class="number">0.026</span> Chrome <span class="number">43.0</span><span class="number">.2357</span> (Mac OS X <span class="number">10.10</span><span class="number">.4</span>): Executed <span class="number">1</span> <span class="operator">of</span> <span class="number">1</span> (<span class="number">1</span> FAILED) ERROR (<span class="number">0.003</span> <span class="built_in">secs</span> / <span class="number">0.026</span> <span class="built_in">secs</span>)
</code></pre><p>接下来我们编写 <code>Caculator.js</code> 的实现逻辑，以及修改 <code>Button.spec.js</code> 和 <code>Button.js</code>，实现计算器的 UI 功能。这里不再深入细节中，大家可以查看<a href="https://github.com/island205/ReactUnitTesting/tree/master/Caculator" target="_blank" rel="external">示例代码</a>。 </p>
<h4 id="事件模拟">事件模拟</h4><p><code>Button</code> 会注册一个 <code>click</code> 监听函数，当用户点击时，会通知 <code>Caculator</code> 输入的内容是什么。下面是这部分的测试用例：</p>
<pre><code>it(<span class="string">'should call onPress as being clicked'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
  <span class="keyword">var</span> letter
  <span class="keyword">var</span> button = TestUtils.renderIntoDocument(
    &lt;Button
      letter=<span class="string">"="</span> onPress={<span class="function"><span class="keyword">function</span> <span class="params">(lt)</span> </span>{
        letter = lt
      }}
    /&gt;
  )

  TestUtils.Simulate.click(button.getDOMNode())

  expect(letter).toBe(<span class="string">'='</span>)
})
</code></pre><p><strong>TestUtils.Simulate</strong> 是 <code>TestUtils</code> 提供的另外一个功能，可以模拟用户的操作，向组件发送事件。更多相关的使用可以参考<a href="http://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">React 相关文档</a>。</p>
<h4 id="Parser-js">Parser.js</h4><p><code>Parser.js</code> 是计算器的算法核心，提供了两个接口：</p>
<ul>
<li><strong>.take(letter)</strong>，将用户每次点击的按钮输入到解析器中；</li>
<li><strong>.getScreen()</strong>，获取屏幕上应该显示的值。</li>
</ul>
<p><span></span></p>
<pre><code><span class="comment">// Caculator.js</span>
updateScreen: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
  <span class="keyword">this</span>.setState({
    screen: <span class="keyword">this</span>.parser.getScreen()
  })
},
onPress: <span class="function"><span class="keyword">function</span> <span class="params">(letter)</span> </span>{
  <span class="keyword">this</span>.parser.take(letter)
  <span class="keyword">this</span>.updateScreen()
},
componentDidMount: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
  <span class="keyword">this</span>.parser = <span class="keyword">new</span> Parser()
  <span class="keyword">this</span>.updateScreen()
}
</code></pre><p>在用户点击按钮的时候，输入 <code>letter</code>，然后调用  <code>getScreen()</code>，通过 <code>setState</code> 来更新显示。</p>
<p>部分测试用例如下：</p>
<pre><code>it<span class="comment">('should handle ±', function ()</span> {
  parser.take<span class="comment">('1')</span>
  expect<span class="comment">(parser.getScreen()</span>).toBe<span class="comment">('1')</span>
  parser.take<span class="comment">('±')</span>
  expect<span class="comment">(parser.getScreen()</span>).toBe<span class="comment">('-1')</span>
  parser.take<span class="comment">('±')</span>
  expect<span class="comment">(parser.getScreen()</span>).toBe<span class="comment">('1')</span>
})

it<span class="comment">('should accpet float', function ()</span> {
  parser.take<span class="comment">('1')</span>
  parser.take<span class="comment">('.')</span>
  parser.take<span class="comment">('1')</span>
  expect<span class="comment">(parser.getScreen()</span>).toBe<span class="comment">('1.1')</span>
  parser.take<span class="comment">('±')</span>
  expect<span class="comment">(parser.getScreen()</span>).toBe<span class="comment">('-1.1')</span>
})

it<span class="comment">('should clear screen when user click C', function ()</span> {
  parser.take<span class="comment">('1')</span>
  parser.take<span class="comment">('.')</span>
  parser.take<span class="comment">('1')</span>
  expect<span class="comment">(parser.getScreen()</span>).toBe<span class="comment">('1.1')</span>
  parser.take<span class="comment">('C')</span>
  expect<span class="comment">(parser.getScreen()</span>).toBe<span class="comment">(0)</span>
})
</code></pre><h5 id="状态图">状态图</h5><p>关于 Parser.js 里的算法，琢磨了很久，怎么改代码都写不好，很明显的问题就是，同一个输入在不同状态下，需要实施的操作完全不一样。于是停止 coding，先把状态图画出来：</p>
<p><img src="http://t1.qpic.cn/mblogpic/9e8552609e06c7b03536/2000.jpg" alt="Caculator State Machine"></p>
<ul>
<li><strong>s1</strong>：初始状态（求值操作或者清空操作都会回到这个状态。）；</li>
<li><strong>s2</strong>：左操作数输入中；</li>
<li><strong>s3</strong>：右操作数输入中；</li>
<li><strong>s4</strong>：出错（除0操作导致）；</li>
</ul>
<p>状态图画好，一切引刃而解，据此添加更多的测试用例，在 Parser.js 把逻辑实现即可。</p>
<h4 id="webpack-config-js">webpack.config.js</h4><p>组件都写好了，新建 <code>dist</code> 目录，添加 <code>dist/index.html</code> 和  入口 ‘src/index.js’ 文件，是时候把组件组装成起来了：</p>
<pre><code><span class="comment">// webpack.config.js</span>
module.exports = {
<span class="label">    entry:</span> <span class="string">"./src/index.js"</span>,
<span class="label">    output:</span> {
<span class="label">        path:</span> <span class="string">'dist/'</span>,
<span class="label">        filename:</span> <span class="string">"bundle.js"</span>
    },
<span class="label">    module:</span> {
<span class="label">        loaders:</span> [
            { <span class="string">test:</span> <span class="regexp">/\.js$/</span>, <span class="string">loader:</span> <span class="string">'babel-loader'</span> },
            { <span class="string">test:</span> <span class="regexp">/\.less$/</span>, <span class="string">loader:</span> <span class="string">"style!css!less"</span> }
        ]
    }
}
</code></pre><p>通过 <code>webpack</code> 把应用打包到 <code>dist/bundle.js</code>。做一些样式方面的调整就行啦。猛击 <a href="http://island205.com/ReactUnitTesting/Caculator/">DEMO</a>。</p>
<h4 id="总结">总结</h4><p>单元测试驱动开发除了能够保证代码质量以外，一定还可以减少调试的重复劳动。比如 Parser 的输入序列使用测试用例来输入很简单，如果使用手动点击就很麻烦了。针对 React 组件的单元测试还有点本文并没有提到，比如 React-Jasmine rewire 的使用等等，大家可以自己琢磨。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>本文的<a href="https://github.com/island205/ReactUnitTesting/tree/master/Caculator" target="_blank" rel="external">源码</a>和 <a h]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js 异步编程之 Callback的问题]]></title>
    <link href="http://island205.com/2015/03/31/the-problem-of-callback/"/>
    <id>http://island205.com/2015/03/31/the-problem-of-callback/</id>
    <published>2015-03-30T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<p>在上一篇中，我们使用 Callback 的方式来实现了我们需求，将一个 IP 列表转换成了具体的城市和天气。可以看出回调嵌套并不是 Callback 作为异步处理方案的真真问题。那正真的问题是什么呢？</p>
<h2 id="可靠性">可靠性</h2><p>上篇文章发出来，就被 <a href="http://weibo.com/1744667943/CaykJoiwz?type=comment" target="_blank" rel="external">@朴灵</a> 吐槽，我还浑然不知。看上一篇文章中的这段代码：</p>
<pre><code><span class="keyword">try</span> {
  data = JSON.parse(data)
  callback(<span class="keyword">null</span>, data)
} <span class="keyword">catch</span> (<span class="keyword">error</span>) {
  callback(<span class="keyword">error</span>)
}
</code></pre><p>事实上，在这段代码中，<code>callback</code> 有可能被调用两次。</p>
<blockquote>
<p>这个问题<a href="http://www.infoq.com/cn/presentations/Nodejs-hole" target="_blank" rel="external">苏千在12年的沪JS大会上已经讲过了</a>，我是现场观众，但却忘记了……</p>
</blockquote>
<p>如果<code>JSON.parse</code> 成功，但是 <code>callback</code> 在运行的时候报异常的话，就会触发 <code>catch</code> 块，<code>callback</code> 就会再被调用一次。这个问题不难理解，但是非常隐蔽。下面是可行的一种 fix 方案：</p>
<pre><code><span class="keyword">var</span> hasError = <span class="literal">false</span>
<span class="keyword">try</span> {
  data = JSON.parse(data)
} <span class="keyword">catch</span> (e) {
  err = e
  hasError = <span class="literal">true</span>
}
<span class="keyword">if</span> (hasError) {
  <span class="keyword">callback</span>(err)
} <span class="keyword">else</span> {
  <span class="keyword">callback</span>(<span class="literal">null</span>, data)
}
</code></pre><p>其实不仅仅是上面这段代码，看下面这一段：</p>
<pre><code><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ips.length; i++) {
  ip = ips[i];
  (<span class="function"><span class="keyword">function</span><span class="params">(ip)</span> </span>{
    ip2geo(ip, <span class="function"><span class="keyword">function</span><span class="params">(err, geo)</span> </span>{
      <span class="keyword">if</span> (err) {
        <span class="keyword">callback</span>(err)
      } <span class="keyword">else</span> {
        geo.ip = ip
        geos.push(geo)
        remain--
      }
      <span class="keyword">if</span> (remain == <span class="number">0</span>) {
        <span class="keyword">callback</span>(<span class="literal">null</span>, geos)
      }
    })
  })(ip)
}
</code></pre><p>这段代码来自 <code>ips2geos</code> 函数，这个函数就是实现并行地异步读取多个 IP 地址的 geo 数据，读取成功后组装成数组返回给 <code>callback</code>；但如果某个异步读取过程出错了，就直接调用 <code>callback</code> 将错误信息返回。但在这段代码中，<code>callback</code> 很可能被调用多次，<strong>这种情况出现在有多个异步 IP 转 geo 出错的时候</strong>。一种还算凑活的修正：</p>
<pre><code><span class="keyword">var</span> returned = <span class="literal">false</span>
<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ips.length; i++) {
  ip = ips[i];
  (<span class="function"><span class="keyword">function</span><span class="params">(ip)</span> </span>{
    ip2geo(ip, <span class="function"><span class="keyword">function</span><span class="params">(err, geo)</span> </span>{
      <span class="keyword">if</span> (returned) {
        <span class="keyword">return</span>
      }
      <span class="keyword">if</span> (err) {
        <span class="keyword">callback</span>(err)
        returned = <span class="literal">true</span>
      } <span class="keyword">else</span> {
        geo.ip = ip
        geos.push(geo)
        remain--
      }
      <span class="keyword">if</span> (remain == <span class="number">0</span>) {
        <span class="keyword">callback</span>(<span class="literal">null</span>, geos)
      }
    })
  })(ip)
}
</code></pre><p>这就是 <code>callback</code> 的可靠性问题。每个以 <code>callback</code> 作为异步回调逻辑都可能产生问题。我们自己写的代码，或者第三方类库都有可能导致 <code>callback</code> 被重复调用。以 <code>callback</code> 提供的异步 API 是无法保证回调次数的，这就产生了信任问题。如果有大量的异步嵌套，只要出错，就是一场灾难。</p>
<h2 id="很难处理串/并行异步操作">很难处理串/并行异步操作</h2><p>串并行的异步操作大大提高了程序的复杂度，而直白的 <code>callback</code> 拿这个问题没有太大的办法。</p>
<p>作为写程序的开发者，同步逻辑更容易理解，更直观。可以像下面这样：</p>
<p>串行逻辑：</p>
<pre><code><span class="tag">var</span> ips = <span class="function"><span class="title">readIP</span><span class="params">(<span class="string">'./ip.json'</span>)</span></span>
<span class="tag">var</span> geos = <span class="function"><span class="title">ips2geos</span><span class="params">(ips)</span></span>
<span class="tag">var</span> weathers = <span class="function"><span class="title">geos2weathers</span><span class="params">(geos)</span></span>
...
</code></pre><p>并行逻辑：</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">ips2geos</span><span class="params">(ips)</span> {</span>
  var geos = <span class="matrix">[]</span>
  var ip
  <span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; ips.<span class="built_in">length</span>; <span class="built_in">i</span>++) <span class="cell">{
    ip = ips[i]
    geos.push(ip2geo(ip))
  }</span>
  <span class="keyword">return</span> geos
}
</code></pre><p>很简单不是。</p>
<blockquote>
<p>像上面这样的代码，<a href="http://fibjs.org/" target="_blank" rel="external">fibjs</a> 可以做到，fibjs 把异步串/并行做到了自己的内部实现中。</p>
</blockquote>
<p>异步打破了程序运行的正常顺序，而 <code>callback</code> 的表现力非常不足，稍微复杂的处理逻辑代码写起来就一团糟。见第一节的 <code>ips2geos</code> 等函数。</p>
<h3 id="总结">总结</h3><p>在本文中我们指出了 <code>callback</code> 作为异步处理的两个比较严重的问题，异步本身并不是坏事，只是 <code>callback</code> 的方案缺乏可靠性，表现力不足。在下一篇文章中我就进入正题，开始给大家介绍 thunk 以及 <a href="https://github.com/thunks/thunks" target="_blank" rel="external">thunks</a> 类库。后者是 <a href="http://weibo.com/zensh" target="_blank" rel="external">@严清</a> 开发的一个类库，灵感来自于 co，意在提升异步编程的体验。敬请期待。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在上一篇中，我们使用 Callback 的方式来实现了我们需求，将一个 IP 列表转换成了具体的城市和天气。可以看出回调嵌套并不是 Callback 作为异步处理方案的真真问题。那正真的问题是什么呢？</p>
<h2 id="可靠性">可靠性</h2><p>上篇文章发出来，]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js 异步编程之 Callback]]></title>
    <link href="http://island205.com/2015/03/27/asnyc-programing-in-nodejs-1/"/>
    <id>http://island205.com/2015/03/27/asnyc-programing-in-nodejs-1/</id>
    <published>2015-03-26T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<p>Node.js 基于 JavaScript 引擎 v8，是单线程的。Node.js 采用了与通常 Web 上的 JavaScript 异步编程的方式来处理会造成阻塞的I/O操作。在 Node.js 中读取文件、访问数据库、网络请求等等都有可能是异步的。对于 Node.js 新人或者从其他语言背景迁移到 Node.js  上的开发者来说，异步编程是比较痛苦的一部分。本章将由浅入深为大家讲解 Node.js 异步编程的方方面面。从最基础的 callback 到 thunk、Promise、co 直到 ES7 计划的 async/await。</p>
<p>首先我们先从一个具体的异步编程的例子说起。</p>
<h2 id="获取多个_ip_所在地的天气信息">获取多个 ip 所在地的天气信息</h2><p>在 ip.json 这个文件中，有一个数组我们存放了若干个 ip 地址，分别来自不同的地方的不同访问者，内容如下：</p>
<pre><code><span class="comment">// ip.json</span>
[<span class="string">"115.29.230.208"</span>, <span class="string">"180.153.132.38"</span>, <span class="string">"74.125.235.224"</span>, <span class="string">"91.239.201.98"</span>, <span class="string">"60.28.215.115"</span>]
</code></pre><p>希望可以每一个 ip 所在地当前的天气。将结果输出到 weather.json 这个文件中各式如下：</p>
<pre><code><span class="comment">// weather.json</span>
[
  { <span class="string">"ip"</span>: <span class="string">"115.29.230.208"</span>, <span class="string">"weather"</span>: <span class="string">"Clouds"</span>, <span class="string">"region"</span>: <span class="string">"Zhejiang"</span> },
  { <span class="string">"ip"</span>: <span class="string">"180.153.132.38"</span>, <span class="string">"weather"</span>: <span class="string">"Clear"</span>, <span class="string">"region"</span>: <span class="string">"Shanghai"</span> },
  { <span class="string">"ip"</span>: <span class="string">"74.125.235.224"</span>, <span class="string">"weather"</span>: <span class="string">"Rain"</span>, <span class="string">"region"</span>: <span class="string">"California"</span> },
  { <span class="string">"ip"</span>: <span class="string">"60.28.215.115"</span>, <span class="string">"weather"</span>: <span class="string">"Clear"</span>, <span class="string">"region"</span>: <span class="string">"Tianjin"</span> }
]
</code></pre><p>整理思路，我们分成以下几步来完成：</p>
<ul>
<li>读取 ip 地址；</li>
<li>根据 ip 地址获取 ip 所在地的地理位置；</li>
<li>根据地理位置查询当地的天气；</li>
<li>将结果写入到 weather.json 文件中。</li>
</ul>
<p>这些步骤都是异步的（读写文件可以同步，但作为示例，都用异步）。</p>
<h2 id="callback">callback</h2><p>首先我们尝试不借助任何库，试着以 Node.js API 通常提供的方式——专递一个 callback 作为异步回调——来实现。我们将借助三个基础模块：</p>
<ul>
<li>fs：从文件 ip.json 读取 IP 列表；把结果写入到文件中；</li>
<li>request：用来发送 HTTP 请求，根据 IP 地址获取 geo 数据，再通过 geo 数据获取天气数据；</li>
<li>querystring：用来组装发送请求的 url 参数。</li>
</ul>
<p>新建一个 callback.js 文件，引入这几个模块：</p>
<pre><code><span class="comment">// callback.js</span>
<span class="tag">var</span> fs = <span class="function"><span class="title">require</span><span class="params">(<span class="string">'fs'</span>)</span></span>
<span class="tag">var</span> request = <span class="function"><span class="title">require</span><span class="params">(<span class="string">'request'</span>)</span></span>
<span class="tag">var</span> qs = <span class="function"><span class="title">require</span><span class="params">(<span class="string">'querystring'</span>)</span></span>
</code></pre><p>读取文件中的 IP 列表，调用 <code>fs.readFile</code> 读取文件内容，再通过 <code>JSON.parse</code> 来解析 JSON 数据：</p>
<pre><code><span class="keyword">...</span>
<span class="keyword">function</span> readIP(path, callback) {
  fs.readFile(path, <span class="keyword">function</span>(err, data) {
    <span class="keyword">if</span> (err) {
      callback(err)
    } <span class="keyword">else</span> {
      <span class="keyword">try</span> {
        data = JSON.parse(data)
        callback(null, data)
      } catch (error) {
        callback(error)
      }
    }
  })
}
<span class="keyword">...</span>
</code></pre><p>接着就是使用 IP 来获取geo，我们使用 <code>request</code> 来请求一个开放的 geo 服务：</p>
<pre><code><span class="keyword">...</span>
<span class="keyword">function</span> ip2geo(ip, callback) {
  var url = <span class="string">'http://www.telize.com/geoip/'</span> + ip
  request({
    url: url,
    json: true
  }, <span class="keyword">function</span>(err, resp, body) {
    callback(err, body)
  })
}
<span class="keyword">...</span>
</code></pre><p>使用 geo 数据来获取 weather：</p>
<pre><code><span class="keyword">...</span>
<span class="keyword">function</span> geo2weather(lat, lon, callback) {
  var params = {
    lat: lat,
    lon: lon,
    APPID: <span class="string">'9bf4d2b07c7ddeb780c5b32e636c679d'</span>
  }
  var url = <span class="string">'http://api.openweathermap.org/data/2.5/weather?'</span> + qs.stringify(params)
  request({
    url: url,
    json: true,
  }, <span class="keyword">function</span>(err, resp, body) {
    callback(err, body)
  })
}
<span class="keyword">...</span>
</code></pre><p>现在我们已经获取 geo、获取 weather 的接口，接下来我们还有稍微复杂的问题要处理，因为 ip 有多个，所以我们需要并行地去读取 geo 已经并行地读取 weather 数据：</p>
<pre><code>...
<span class="function"><span class="keyword">function</span> <span class="title">ips2geos</span><span class="params">(ips, callback)</span> </span>{
  <span class="keyword">var</span> geos = []
  <span class="keyword">var</span> ip
  <span class="keyword">var</span> remain = ips.length
  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ips.length; i++) {
    ip = ips[i];
    (<span class="function"><span class="keyword">function</span><span class="params">(ip)</span> </span>{
      ip2geo(ip, <span class="function"><span class="keyword">function</span><span class="params">(err, geo)</span> </span>{
        <span class="keyword">if</span> (err) {
          <span class="keyword">callback</span>(err)
        } <span class="keyword">else</span> {
          geo.ip = ip
          geos.push(geo)
          remain--
        }
        <span class="keyword">if</span> (remain == <span class="number">0</span>) {
          <span class="keyword">callback</span>(<span class="literal">null</span>, geos)
        }
      })
    })(ip)
  }
}

<span class="function"><span class="keyword">function</span> <span class="title">geos2weathers</span><span class="params">(geos, callback)</span> </span>{
  <span class="keyword">var</span> weathers = []
  <span class="keyword">var</span> geo
  <span class="keyword">var</span> remain = geos.length
  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; geos.length; i++) {
    geo = geos[i];
    (<span class="function"><span class="keyword">function</span><span class="params">(geo)</span> </span>{
      geo2weather(geo.latitude, geo.longitude, <span class="function"><span class="keyword">function</span><span class="params">(err, weather)</span> </span>{
        <span class="keyword">if</span> (err) {
          <span class="keyword">callback</span>(err)
        } <span class="keyword">else</span> {
          weather.geo = geo
          weathers.push(weather)
          remain--
        }
        <span class="keyword">if</span> (remain == <span class="number">0</span>) {
          <span class="keyword">callback</span>(<span class="literal">null</span>, weathers)
        }
      })
    })(geo)
  }
}
...
</code></pre><p>ips2geos 和 geos2weathers 都使用了一种比较原始的方法，remain 来计算等待返回的个数，remain 为 0 表示并行请求结束，将处理结果装进一个数组返回。</p>
<p>最后就是将结果写入到 weather.json 文件中：</p>
<pre><code><span class="keyword">...</span>
<span class="keyword">function</span> writeWeather(weathers, callback) {
  var output = []
  var weather
  <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; weathers.length; i++) {
    weather = weathers[i]
    output.push({
      ip: weather.geo.ip,
      weather: weather.weather[<span class="number">0</span>].main,
      region: weather.geo.region
    })
  }
  fs.writeFile(<span class="string">'./weather.json'</span>, JSON.stringify(output, null, <span class="string">'  '</span>), callback)
}
<span class="keyword">...</span>
</code></pre><p>组合上面这些函数，我们就可以实现我们的目标：</p>
<pre><code>...
<span class="function"><span class="keyword">function</span> <span class="title">handlerError</span><span class="params">(err)</span> </span>{
  <span class="built_in">console</span>.log(<span class="string">'error: '</span> + err)
}

readIP(<span class="string">'./ip.json'</span>, <span class="function"><span class="keyword">function</span><span class="params">(err, ips)</span> </span>{
  <span class="keyword">if</span> (err) {
    handlerError(err)
  } <span class="keyword">else</span> {
    ips2geos(ips, <span class="function"><span class="keyword">function</span><span class="params">(err, geos)</span> </span>{
      <span class="keyword">if</span> (err) {
        handlerError(err)
      } <span class="keyword">else</span> {
        geos2weathers(geos, <span class="function"><span class="keyword">function</span><span class="params">(err, weathers)</span> </span>{
          <span class="keyword">if</span> (err) {
            handlerError(err)
          } <span class="keyword">else</span> {
            writeWeather(weathers, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> </span>{
              <span class="keyword">if</span> (err) {
                handlerError(err)
              } <span class="keyword">else</span> {
                <span class="built_in">console</span>.log(<span class="string">'success!'</span>)
              }
            })
          }
        })
      }
    })
  }
})
</code></pre><p>哈哈，你妈这嵌套，你可能觉得这就是 JavaScript 异步的问题，说真的，嵌套不是 JavaScript 异步的真正问题所在。上面这段代码我们可以下面这样写：</p>
<pre><code>...
<span class="keyword">function</span> ReadIPCallback(<span class="built_in">err</span>, ips) {
  <span class="keyword">if</span> (<span class="built_in">err</span>) {
    handlerError(<span class="built_in">err</span>)
  } <span class="keyword">else</span> {
    ips2geos(ips, ips2geosCallback)
  }
}

<span class="keyword">function</span> ips2geosCallback(<span class="built_in">err</span>, geos) {
  <span class="keyword">if</span> (<span class="built_in">err</span>) {
    handlerError(<span class="built_in">err</span>)
  } <span class="keyword">else</span> {
    geos2weathers(geos, geos2weathersCallback)
  }
}

<span class="keyword">function</span> geos2weathersCallback(<span class="built_in">err</span>, weathers) {
  <span class="keyword">if</span> (<span class="built_in">err</span>) {
    handlerError(<span class="built_in">err</span>)
  } <span class="keyword">else</span> {
    writeWeather(weathers, writeWeatherCallback)
  }
}

<span class="keyword">function</span> writeWeatherCallback(<span class="built_in">err</span>) {
  <span class="keyword">if</span> (<span class="built_in">err</span>) {
    handlerError(<span class="built_in">err</span>)
  } <span class="keyword">else</span> {
    console.<span class="built_in">log</span>(<span class="comment">'success!')</span>
  }
}

readIP(<span class="comment">'./ip.json', ReadIPCallback)</span>
</code></pre><p>好了，这是我们 callback.js 的全部内容。运行：</p>
<pre><code>node <span class="keyword">callback</span>.js
</code></pre><p>将会生成 weater.json 文件：</p>
<pre><code>[
  {
    "<span class="attribute">ip</span>": <span class="value"><span class="string">"180.153.132.38"</span></span>,
    "<span class="attribute">weather</span>": <span class="value"><span class="string">"Clear"</span></span>,
    "<span class="attribute">region</span>": <span class="value"><span class="string">"Shanghai"</span>
  </span>},
  {
    "<span class="attribute">ip</span>": <span class="value"><span class="string">"91.239.201.98"</span></span>,
    "<span class="attribute">weather</span>": <span class="value"><span class="string">"Clouds"</span>
  </span>},
  {
    "<span class="attribute">ip</span>": <span class="value"><span class="string">"60.28.215.115"</span></span>,
    "<span class="attribute">weather</span>": <span class="value"><span class="string">"Clear"</span></span>,
    "<span class="attribute">region</span>": <span class="value"><span class="string">"Tianjin"</span>
  </span>},
  {
    "<span class="attribute">ip</span>": <span class="value"><span class="string">"74.125.235.224"</span></span>,
    "<span class="attribute">weather</span>": <span class="value"><span class="string">"Clouds"</span></span>,
    "<span class="attribute">region</span>": <span class="value"><span class="string">"California"</span>
  </span>},
  {
    "<span class="attribute">ip</span>": <span class="value"><span class="string">"115.29.230.208"</span></span>,
    "<span class="attribute">weather</span>": <span class="value"><span class="string">"Clear"</span></span>,
    "<span class="attribute">region</span>": <span class="value"><span class="string">"Zhejiang"</span>
  </span>}
]
</code></pre><p>那正真的问题是什么？</p>
<p>当然是异步的问题啦，异步本质上要处理三个事情：</p>
<ul>
<li>异步操作什么时候结束，需要通知回来，Callback 是一种方案；</li>
<li>异步产生的结果需要传递回来，Callback 接受一个 data 参数，把数据传回来；</li>
<li>异步如果出错了怎么办？Callback 接受 一个 err 参数，把错误传回来。</li>
</ul>
<p>但有没有发现好多重复的工作（各种 callback）？上面的这些代码有什么问题么？请大家期待本文的续篇。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Node.js 基于 JavaScript 引擎 v8，是单线程的。Node.js 采用了与通常 Web 上的 JavaScript 异步编程的方式来处理会造成阻塞的I/O操作。在 Node.js 中读取文件、访问数据库、网络请求等等都有可能是异步的。对于 Node.js ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端模块化杂谈]]></title>
    <link href="http://island205.com/2014/05/23/thinking-in-front-end-module/"/>
    <id>http://island205.com/2014/05/23/thinking-in-front-end-module/</id>
    <published>2014-05-22T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<p>在模块化方面，Node.js就显得游刃有余。</p>
<p>作为用户，我们把代码放到一个个JavaScript文件中，然后Node.js就有一套规则帮我们把这些代码组织起来，Node.js还有包的概念，于是我们就可以使用npm将代码放到一个个包中，放到这里那里的node_modules中使用。很方便不是？感谢Node.js。</p>
<p>可在浏览器端，模块化这事就没那么简单了。</p>
<h2 id="前端的模块">前端的模块</h2><p>前端的一个模块包含很多东西，JavaScript、CSS、图片字体等等。甚至，可能根据业务需要，还包含国际化的文件。一个模块如果包含以上这些东西，复杂度就上了几个数量级。</p>
<p>怎么复杂了？和高大上的iOS开发比起来，人家有SDK，代码随便往项目里扔，图片扔，国际化有成熟的解决方案，最后构建一下一个可运行的应用就出来了。</p>
<p>前端缺乏SDK，没有成熟统一的开发方案，集成方案，前端模块化之路很崎岖。开发时，我们需要一种方式来组织，加载代码，发布时，我们还需要另外一种方式将代码、资源合并到一起发布。</p>
<h2 id="眼前的现状">眼前的现状</h2><p>TJ 给出了自己解决方案——Component。可以份文件开发，然后再把 JavaScript、CSS 和模板文件合并到一起。我只能说，理想很丰满，现实很骨感，Component 无法适应各种奇葩的应用场景。</p>
<p>或者我们自由一点——</p>
<p>依赖的第三方模块，我们有Bower，好爽，运行个命令，依赖就安装好了。</p>
<p>但是Bower不是银弹，Bower只解决了模块依赖，安装依赖的问题。Bower中的模块没有任何标准和规则，有的只有JavaScript，有的支持AMD，有的可能只有CSS。文件结构，入口文件完全不一样。并不是使用Bower安装的模块我们就可以使用同样的方式使用任何一个模块，使用某种工具将这些模块打包发布！</p>
<p>AMD作为事实上的前端JavaScript模块化标准，或可以出来解救我们。很多Bower模块都是支持AMD规范的。而且AMD还提供了打包工具，总算有点解脱了。好景不长……</p>
<p>每个模块中的HTML怎么办，如果我们使用的框架是Backbone，注定我们要将HTML模板转换成JavaScript模块，或者使用模块加载器的插件来实现。如果我们使用AngularJS，那倒是可以交由AngularJS。发布时Backbone中的模块使用AMD打包，AngularJS可以使用Grunt内联到页面中。</p>
<p>HTML模块也没有固定的模式，没有固定的SDK来解脱我们。我们只能组合现有的工具！</p>
<p>CSS就更不用说了，分开写，使用LESS、SASS来组织？再一次没有固定的模式没有SDK。</p>
<p>还有图片呢，字体呢？</p>
<h2 id="拼凑的方案">拼凑的方案</h2><p>前端如果想做模块化开发，首先需要针对每一种资源（JavaScript、CSS、模板等）寻找一种模块与集成方案，然后需要根据情况的不同选用不同的工具框架拼凑出来。</p>
<h3 id="JavaScript">JavaScript</h3><p>目前比较拿的出手的，也就是JavaScript的模块化，比如AMD或者CMD等等，分别可以使用RequireJS和SeaJS。</p>
<blockquote>
<p>去年在研究基于Backbone的框架Marionette时，想与Sea.js结合使用。现在来看这种组合是完全没有必要的。Marionette提供了模块化的组织方案，反而生拉硬扯在一起，冲突得很难受。其实把JavaScript文件一列放在HTML中也没什么问题。<br>究竟使用什么来实现JavaScript，往往与选择的JavaScript框架有关，选Backbone可以AMD，也可以CMD。选AngularJS直接引用就行。</p>
</blockquote>
<h3 id="CSS">CSS</h3><p>CSS模块化应该是两方面的问题——</p>
<p>一是模块必须有一套基础样式。与JavaScript相比，CSS冲突简直是家常便饭，Shadow DOM还没成熟，原生的CSS样式隔离还在路上。所以必须有一套基础样式来规定这一套模块化组件的样式。我们可以选Bootstrap，如果闲它太重，也可以自己写。</p>
<p>其次，每个组件必须有命名空间，避免组件间样式冲突。如果选择使用LESS、SASS等，那就比较好办，它们的缩进语法避免写很多重复的CSS代码。</p>
<h3 id="HTML模板">HTML模板</h3><p>如果使用AngularJS，那AngularJS已经帮您解决了模板模块化的问题，AngularJS可以根据模块代码中的引用加载对应的HTML。如果使用Backbone，可以选择各种各样的模板引擎，Mustache？不过比起AngularJS就低端些，我们必须自己处理模板文件，要么通过模块加载器通过XHR请求，然后动态编译；或者将Mustache编译成JS，在当做模块加载。</p>
<h3 id="图片、字体？">图片、字体？</h3><p>放在使用他们的模块中，该怎么引用就怎么引用。</p>
<p>国际化文件？这些就不多说了，总之，每种文件需要选定一种开发的组织方式。</p>
<h2 id="模块分发">模块分发</h2><p>模块采用统一的模式来开发之后，只需选定一种包的分发方式就行了——Bower。npm不适合这样的场景，npm的版本管理太过细致了。如果同一个项目中允许出现同一模块的不同版本，事情就做的太过复杂了。</p>
<h2 id="发布上线">发布上线</h2><p>发布上线必须一个以终为始的过程。如果你不追求网站或者应用的速度，那就把那些开发文件直接丢到生产服务器上去吧。别说，我还真见过这样的商用的网站。</p>
<p>如果讲究一些方案，资源合并成数个文件，代码线上组合和运行方式完全可以与本地开发不一样。只需要功能在就行。</p>
<p>JavaScript代码打成一个文件，或者两个？都行。如果使用RequireJS，那RequireJS提供了打包的工具，打包成几个文件，什么粒度，都行。如果是Sea.js也有对应的工具。就算文件都是一个一个列出来，我们也总是可以打出来你想要的文件。</p>
<p>CSS等等其他资源都是如此，就算开发时各自不同的结构模式，打包时都是可以打的。</p>
<p>至于上线CDN，版本号缓存什么的并不在本文的讨论范围之内。</p>
<h2 id="总结">总结</h2><p>前端模块没有什么特效药。唯一要遵守的原则就是，比起Node.js来讲，每种资源必须要有一种自己的开发和上线组织方式（Node.js开发和上线都是一致的），开发和上线完全可以是两种方式，大可不必人云亦云，只要适合可以随意组合；CSS在CSS Scoped Style正式使用之前，应该有一套基础样式和沙盒（模块样式命名空间）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在模块化方面，Node.js就显得游刃有余。</p>
<p>作为用户，我们把代码放到一个个JavaScript文件中，然后Node.js就有一套规则帮我们把这些代码组织起来，Node.js还有包的概念，于是我们就可以使用npm将代码放到一个个包中，放到这里那里的node_m]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CoffeeScript编译器（一）]]></title>
    <link href="http://island205.com/2012/10/22/the-compiler-of-coffeescript-1/"/>
    <id>http://island205.com/2012/10/22/the-compiler-of-coffeescript-1/</id>
    <published>2012-10-21T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a>越来越流行，接触CoffeeScript也已经一年有余，最近正在看它的编译器实现，在这里把体会记录下来。</p>
<p>目前，CoffeeScript编译器是使用CoffeeScript编写的，很多人会问，这是蛋生鸡呢，还是鸡生蛋？<br>其实CoffeeScript编译器最初是使用Ruby编写的，CoffeeScript团队于2010年2月21号发布了<a href="http://coffeescript.org/#changelog" target="_blank" rel="external">v0.5.0</a>，使用CoffeeScript重写了编译器。</p>
<h2 id="CoffeeScript编译器的整体架构">CoffeeScript编译器的整体架构</h2><p>就目前的CoffeeScript编译器来说，整体架构如下图：</p>
<pre><code>             -<span class="ruby">------------      -----------------
</span>             -<span class="ruby">           -      -               -
</span>cs code ---&gt; -   Lexer   - ---&gt; - Parser(Jison) - ---&gt; AST ---&gt; node.compile() ---&gt; js code
             -<span class="ruby">           -      -               -
</span>             -<span class="ruby">------------      -----------------
</span>                                        ^
                                        -<span class="ruby">
</span>                                        -<span class="ruby">
</span>                                  -<span class="ruby">------------
</span>                                  -<span class="ruby">           -
</span>                                  -<span class="ruby">   <span class="constant">Nodes</span>   -
</span>                                  -<span class="ruby">           -
</span>                                  -<span class="ruby">------------</span>
</code></pre><p>概括来讲（通常了解点编译器的人都会说的），CoffeeScript编译器也不例外，主要也分为三大部分：词法解析器（Lexer），语法解析器（Parser）以及构造AST（抽象语法树），遍历语法树生成相应的代码。</p>
<h2 id="下面首先对这三块进行简单的介绍：">下面首先对这三块进行简单的介绍：</h2><ul>
<li><p><strong>Lexer(<a href="http://coffeescript.org/documentation/docs/lexer.html" target="_blank" rel="external">lexer.coffee</a>)</strong>：词法解析器就是接受输入的cs代码，然后输出token。虽然CoffeeScript语法解析是基于Jison的，Jison同时也可以做词法解析，但CoffeeScript却自己实现了词法解析器。为什么CoffeeScript要自己实现一个Lexer呢？因为CoffeeScript的语法是LALR(1)的，无法满足CoffeeScript简洁语法的需要，因此需要自定义Lexer，且使用<a href="http://coffeescript.org/documentation/docs/rewriter.html" target="_blank" rel="external">rewriter.coffee</a>来处理这些语法，在token流中插入补充token； </p>
</li>
<li><p><strong>Parser(<a href="http://coffeescript.org/documentation/docs/grammar.html" target="_blank" rel="external">grammar.coffee</a>)</strong>：语法解析器就是根据CoffeeScript的语法规则，接受Lexer的输出的token作为输入产生AST。生成AST并不是所有Parser都需要做的。在语法解析的过程中，使用不同的语法规则进行移入token，规约即可。只是可以定义规约时的操作，结合<a href="http://coffeescript.org/documentation/docs/nodes.html" target="_blank" rel="external">nodes.coffee</a>（其中定义了AST不同类型的节点）生成CoffeeScript所需的AST；<br>在源码中并没有一个名为<code>parser.coffee</code>的文件。Parser是使用Jison基于<code>grammar.coffee</code>生成的；</p>
</li>
<li><strong>AST</strong>：抽象语法树是Parser的产物，也就是<code>nodes.coffee</code>所定义的诸多节点组成的一棵树。每个节点都有<code>compile</code>和<code>compileNode</code>方法。从根节点开始，通过<code>compile</code>方法的调用，深度优先遍历整个AST，从而生成js代码。</li>
</ul>
<p>调用CoffeeScript提供出来的接口，可以看到产生的一些中间变量，例如：</p>
<pre><code>code = <span class="string">''</span><span class="string">'
do -&gt;
    String::trim || String::trim = -&gt;
        @replace /^\s+|\s+$/g,'</span><span class="string">'
    return
'</span><span class="string">''</span>
<span class="comment">###</span>
[
    [<span class="string">"UNARY"</span>, <span class="string">"do"</span>, <span class="number">0</span>],
    [<span class="string">"-&gt;"</span>, <span class="string">"-&gt;"</span>, <span class="number">0</span>],
    [<span class="string">"INDENT"</span>, <span class="number">4</span>, <span class="number">1</span>],
    [<span class="string">"IDENTIFIER"</span>, <span class="string">"String"</span>, <span class="number">1</span>],
    [<span class="string">"::"</span>, <span class="string">"::"</span>, <span class="number">1</span>],
    [<span class="string">"IDENTIFIER"</span>, <span class="string">"trim"</span>, <span class="number">1</span>],
    [<span class="string">"LOGIC"</span>, <span class="string">"||"</span>, <span class="number">1</span>],
    [<span class="string">"IDENTIFIER"</span>, <span class="string">"String"</span>, <span class="number">1</span>],
    [<span class="string">"::"</span>, <span class="string">"::"</span>, <span class="number">1</span>],
    [<span class="string">"IDENTIFIER"</span>, <span class="string">"trim"</span>, <span class="number">1</span>],
    [<span class="string">"="</span>, <span class="string">"="</span>, <span class="number">1</span>],
    [<span class="string">"-&gt;"</span>, <span class="string">"-&gt;"</span>, <span class="number">1</span>],
    [<span class="string">"INDENT"</span>, <span class="number">4</span>, <span class="number">2</span>],
    [<span class="string">"@"</span>, <span class="string">"@"</span>, <span class="number">2</span>],
    [<span class="string">"IDENTIFIER"</span>, <span class="string">"replace"</span>, <span class="number">2</span>],
    [<span class="string">"CALL_START"</span>, <span class="string">"("</span>, <span class="number">2</span>],
    [<span class="string">"REGEX"</span>, <span class="string">"/^s+|s+$/g"</span>, <span class="number">2</span>],
    [<span class="string">","</span>, <span class="string">","</span>, <span class="number">2</span>],
    [<span class="string">"STRING"</span>, <span class="string">"''"</span>, <span class="number">2</span>],
    [<span class="string">"CALL_END"</span>, <span class="string">")"</span>, <span class="number">3</span>],
    [<span class="string">"OUTDENT"</span>, <span class="number">4</span>, <span class="number">3</span>],
    [<span class="string">"TERMINATOR"</span>, <span class="string">"\n"</span>, <span class="number">3</span>],
    [<span class="string">"RETURN"</span>, <span class="string">"return"</span>, <span class="number">3</span>],
    [<span class="string">"OUTDENT"</span>, <span class="number">4</span>, <span class="number">3</span>],
    [<span class="string">"TERMINATOR"</span>, <span class="string">"\n"</span>, <span class="number">3</span>]
]
<span class="comment">###</span>
console.log JSON.stringify CoffeeScript.tokens code
<span class="comment">###</span>
{
    <span class="string">"expressions"</span>: [{
        <span class="string">"args"</span>: [],
        <span class="string">"isNew"</span>: <span class="literal">false</span>,
        <span class="string">"isSuper"</span>: <span class="literal">false</span>,
        <span class="string">"variable"</span>: {
            <span class="string">"params"</span>: [],
            <span class="string">"body"</span>: {
                <span class="string">"expressions"</span>: [{
                    <span class="string">"operator"</span>: <span class="string">"||"</span>,
                    <span class="string">"first"</span>: {
                        <span class="string">"base"</span>: {
                            <span class="string">"value"</span>: <span class="string">"String"</span>
                        },
                        <span class="string">"properties"</span>: [{
                            <span class="string">"name"</span>: {
                                <span class="string">"value"</span>: <span class="string">"trim"</span>,
                                <span class="string">"asKey"</span>: <span class="literal">true</span>
                            },
                            <span class="string">"proto"</span>: <span class="string">".prototype"</span>,
                            <span class="string">"soak"</span>: <span class="literal">false</span>
                        }]
                    },
                    <span class="string">"second"</span>: {
                        <span class="string">"variable"</span>: {
                            <span class="string">"base"</span>: {
                                <span class="string">"value"</span>: <span class="string">"String"</span>
                            },
                            <span class="string">"properties"</span>: [{
                                <span class="string">"name"</span>: {
                                    <span class="string">"value"</span>: <span class="string">"trim"</span>,
                                    <span class="string">"asKey"</span>: <span class="literal">true</span>
                                },
                                <span class="string">"proto"</span>: <span class="string">".prototype"</span>,
                                <span class="string">"soak"</span>: <span class="literal">false</span>
                            }]
                        },
                        <span class="string">"value"</span>: {
                            <span class="string">"params"</span>: [],
                            <span class="string">"body"</span>: {
                                <span class="string">"expressions"</span>: [{
                                    <span class="string">"args"</span>: [{
                                        <span class="string">"base"</span>: {
                                            <span class="string">"value"</span>: <span class="string">"/^s+|s+$/g"</span>
                                        },
                                        <span class="string">"properties"</span>: []
                                    }, {
                                        <span class="string">"base"</span>: {
                                            <span class="string">"value"</span>: <span class="string">"''"</span>
                                        },
                                        <span class="string">"properties"</span>: []
                                    }],
                                    <span class="string">"soak"</span>: <span class="literal">false</span>,
                                    <span class="string">"isNew"</span>: <span class="literal">false</span>,
                                    <span class="string">"isSuper"</span>: <span class="literal">false</span>,
                                    <span class="string">"variable"</span>: {
                                        <span class="string">"base"</span>: {
                                            <span class="string">"value"</span>: <span class="string">"this"</span>
                                        },
                                        <span class="string">"properties"</span>: [{
                                            <span class="string">"name"</span>: {
                                                <span class="string">"value"</span>: <span class="string">"replace"</span>,
                                                <span class="string">"asKey"</span>: <span class="literal">true</span>
                                            },
                                            <span class="string">"proto"</span>: <span class="string">""</span>,
                                            <span class="string">"soak"</span>: <span class="literal">false</span>
                                        }],
                                        <span class="string">"this"</span>: <span class="literal">true</span>
                                    }
                                }]
                            },
                            <span class="string">"bound"</span>: <span class="literal">false</span>
                        }
                    },
                    <span class="string">"flip"</span>: <span class="literal">false</span>
                }, {}]
            },
            <span class="string">"bound"</span>: <span class="literal">false</span>
        },
        <span class="string">"do"</span>: <span class="literal">true</span>
    }]
}
<span class="comment">###</span>
console.log JSON.stringify CoffeeScript.nodes code
</code></pre><p>这一部分就说到这里，之后会更加深入到CoffeeScript的各个实现细节之中。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a>越来越流行，接触CoffeeScript也已经一年有余，最近正在看它的编译器实现，在这里把体会记录下来。</p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[豆瓣阅读《CoffeeScript小书》上架啦！]]></title>
    <link href="http://island205.com/2012/07/19/the-little-book-of-coffeescript-on-douban/"/>
    <id>http://island205.com/2012/07/19/the-little-book-of-coffeescript-on-douban/</id>
    <published>2012-07-18T16:00:00.000Z</published>
    <updated>2015-03-19T00:11:07.000Z</updated>
    <content type="html"><![CDATA[<p>今天D2，豆瓣的石岩给我们带来豆瓣阅读在开发方面的心得，有一张PPT还用到了上周我在豆瓣阅读上架的一本书《CoffeeScript小书》。其实就是本博之前翻译的<a href="http://arcturo.github.com/library/coffeescript/" target="_blank" rel="external">the-little-book-on-coffeescript</a>的中文合集。</p>
<p>豆瓣阅读的体验真的很不错，这是本书在豆瓣阅读Web版上的一张预览图：</p>
<p><img src="http://pic.yupoo.com/island205/C65pIc2W/W8G6w.png" alt="douban"></p>
<p>在其他平台上，比如说Android，iPad，Kindle Fire上体验也很好。大家可以访问<a href="http://read.douban.com/ebook/198648/" target="_blank" rel="external">《CoffeeScript小书》</a>试读，喜欢可以购买（才1.9RMB）啊，而且可通过豆瓣阅读App同步到各种平台上，阅读起来很方便的。</p>
<p>但是到<a href="http://island205.github.com/tlboc/" target="_blank" rel="external">这里</a>也可以读到本书完整的内容，希望大家喜欢。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天D2，豆瓣的石岩给我们带来豆瓣阅读在开发方面的心得，有一张PPT还用到了上周我在豆瓣阅读上架的一本书《CoffeeScript小书》。其实就是本博之前翻译的<a href="http://arcturo.github.com/library/coffeescript/"]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[可选择样式表]]></title>
    <link href="http://island205.com/2012/07/04/alternative-stylesheet/"/>
    <id>http://island205.com/2012/07/04/alternative-stylesheet/</id>
    <published>2012-07-03T16:00:00.000Z</published>
    <updated>2015-03-19T00:11:07.000Z</updated>
    <content type="html"><![CDATA[<p>可选择样式表这个问题，有点绕，之前看懂了，后来忘记，现在就把它记下来。 这个问题与样式表的rel和title属性的值和组合有关：</p>
<p>1.默认样式表，指定rel属性为stylesheet，会在页面上一直存在的样式，不受用户选择其他可选择样式表的影响：</p>
<pre><code><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">”default.css”</span> <span class="attribute">rel</span>=<span class="value">”stylesheet”</span> <span class="attribute">type</span>=<span class="value">”text</span>/<span class="attribute">css</span>”&gt;</span>
</code></pre><p>2.可选择默认样式表，指定rel属性为stylesheet，指定title的值，默认会应用到页面上，会出现在用户可选择样式表列表内，且用户选了其他可替换样式表后，会去掉该样式表：</p>
<pre><code><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">”default.css”</span> <span class="attribute">rel</span>=<span class="value">”stylesheet”</span> <span class="attribute">type</span>=<span class="value">”text</span>/<span class="attribute">css</span>” <span class="attribute">title</span>=<span class="value">”Alternate</span> <span class="attribute">Default</span> <span class="attribute">Style</span>”&gt;</span>
</code></pre><p>3.可选择样式表，指定rel属性为alternate stylesheet，指定title的值，默认不会应用到页面上，会出现在用户可选择样式表列表内，且用户选了其他可替换样式表后，会去掉该样式表，可以有多类（title来区分），下面是两个示例：</p>
<pre><code><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">”basic.css”</span> <span class="attribute">rel</span>=<span class="value">”alternate</span> <span class="attribute">stylesheet</span>” <span class="attribute">type</span>=<span class="value">”text</span>/<span class="attribute">css</span>” <span class="attribute">title</span>=<span class="value">”Basic”</span>&gt;</span>

<span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">”fancy.css”</span> <span class="attribute">rel</span>=<span class="value">”alternate</span> <span class="attribute">stylesheet</span>” <span class="attribute">type</span>=<span class="value">”text</span>/<span class="attribute">css</span>” <span class="attribute">title</span>=<span class="value">”Fancy”</span>&gt;</span>
</code></pre><p>在Firefox中，使用菜单View&gt;&gt;Page Style可以查看可选择样式表列表（我的是Firefox 13.0.1）。</p>
<h2 id="参考">参考</h2><ul>
<li><a href="https://developer.mozilla.org/en/CSS/Alternative_style_sheets" target="_blank" rel="external">Alternative Style Sheets</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>可选择样式表这个问题，有点绕，之前看懂了，后来忘记，现在就把它记下来。 这个问题与样式表的rel和title属性的值和组合有关：</p>
<p>1.默认样式表，指定rel属性为stylesheet，会在页面上一直存在的样式，不受用户选择其他可选择样式表的影响：</p>
<p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[MDC上是如何实现bind函数的]]></title>
    <link href="http://island205.com/2012/04/13/how-mdc-implement-bind/"/>
    <id>http://island205.com/2012/04/13/how-mdc-implement-bind/</id>
    <published>2012-04-12T16:00:00.000Z</published>
    <updated>2015-03-19T00:11:07.000Z</updated>
    <content type="html"><![CDATA[<p>在平时开发过程中想必都有把函数绑定到某个上下文 this 上 JavaScript 1.8.5 中引入了 <code>Function.prototype.bind</code> 来满足这个需求今天就来说一说这个函数 什么时候使用 <code>bind</code> 函数 先看这个例子：</p>
<pre><code>$(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
  <span class="keyword">var</span> me;
  me = {
    name: <span class="string">"mee"</span>
    init: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      <span class="keyword">this</span>.bind();
    }
    bind: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      $(<span class="built_in">window</span>).click(<span class="keyword">this</span>.sayHello);
    }
    sayHello: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      alert(<span class="string">"Hello I am "</span>
        <span class="keyword">this</span>.name <span class="string">" !"</span>);
    }
  };
  me.init();
});
</code></pre><p>单击窗口之后结果是 <code>Hello I am result !</code> 这并不是我们想要的我们希望的是 <code>Hello I am meee !</code> 为什么会这样因为<code>$(window).click(this.sayHello)</code> 改变了 <code>sayHello</code> 的上下文如果我们使用如下的方法给 <code>sayHello</code> 绑定上正确的上下文即可：</p>
<pre><code>$(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
  <span class="keyword">var</span> me;
  me = {
    name: <span class="string">"mee"</span>
    init: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      <span class="keyword">this</span>.bind();
    }
    bind: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      $(<span class="built_in">window</span>).click(<span class="keyword">this</span>.sayHello.bind(<span class="keyword">this</span>));
    }
    sayHello: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      alert(<span class="string">"HelloI am "</span>
        <span class="keyword">this</span>.name <span class="string">" !"</span>);
    }
  };
  me.init();
}); 
</code></pre><p><code>bind</code> 函数到底是什么 在 JavaScript 中函数是非常灵活的函数执行时都是在某个特定的上下文中并且在 JavaScript 中可直接通过 <code>apply</code> 或者 <code>call</code> 函数来修改函数的上下文在较老的不支持bind函数的浏览器中我们可以通过如下的方式实现 <code>bind</code>：</p>
<pre><code><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) {
  <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span><span class="params">(context)</span> </span>{
    <span class="keyword">var</span> toBind;
    toBind = <span class="keyword">this</span>;
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      <span class="keyword">return</span> toBind.apply(context <span class="built_in">arguments</span>);
    };
  };
}
</code></pre><p>MDC 是如何实现 <code>bind</code> 函数的 实话是上面 <code>bind</code> 的实现和 MDC 的比起来弱爆了先看看 MDC 的实现：</p>
<pre><code><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) {
  <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span><span class="params">(oThis)</span> </span>{
    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) {
      <span class="comment">// closest thing possible to the ECMAScript 5</span>
      <span class="comment">// internal IsCallable function</span>
      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - what is trying to be bound is not callable'</span>);
    }

    <span class="keyword">var</span> aArgs   = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),
        fToBind = <span class="keyword">this</span>,
        fNOP    = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{},
        fBound  = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
          <span class="keyword">return</span> fToBind.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP
                 ? <span class="keyword">this</span>
                 : oThis,
                 aArgs.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));
        };

    fNOP.prototype = <span class="keyword">this</span>.prototype;
    fBound.prototype = <span class="keyword">new</span> fNOP();

    <span class="keyword">return</span> fBound;
  };
}
</code></pre><p> MDC 的实现做了如下的处理 <code>typeof this !== function</code> 首先确定上下文是否是一个函数 <code>aArgs = Array.prototype.slice.call(arguments 1)</code> 标准里的一部分 <code>fun.bind(thisArg[ arg1[ arg2[ ...]]])</code> 可传入一些固定的参数 <code>this instanceof fNOP ? this : oThis || window</code> 这一句非常细节处理的问题是当使用 <code>new</code> 关键字调用绑定的函数后还能以新的 <code>this</code> 调用构造函数而不被绑定到特定的上下文中 <code>fNOP.prototype = this.prototype; fBound.prototype = new fNOP();</code> 这两句也很细节保证生成的绑定的新函数继承了原来函数的所有原型属性且对新函数原型的修改不会影响到原来的函数 总之只能调用函数的 <code>bind</code> 方法 <code>Function.prototype.bind.call({})</code> 就会报错即处理 1 生成的新函数包含了原函数的所有功能甚至包括元函数的原型但是对新函数的修改不会影响原函数新函数与原函数唯一的区别就是前者绑定了上下文而这个绑定的上下文并不影响 <code>new</code> 新函数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在平时开发过程中想必都有把函数绑定到某个上下文 this 上 JavaScript 1.8.5 中引入了 <code>Function.prototype.bind</code> 来满足这个需求今天就来说一说这个函数 什么时候使用 <code>bind</code> 函数 ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[《深处浅出 CoffeeScript》译者序]]></title>
    <link href="http://island205.com/2012/04/01/translator-word-coffeescript-accelerated-javascript/"/>
    <id>http://island205.com/2012/04/01/translator-word-coffeescript-accelerated-javascript/</id>
    <published>2012-03-31T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<p><em>The golden rule of CoffeeScript is: “It’s just JavaScript”.</em>——<a href="http://coffeescript.org/" target="_blank" rel="external">coffeescript.org</a></p>
<p>CoffeeScript的作者Jeremy Ashkenas在twitter上有个很好笑的段子： </p>
<p>他说：“我非常想知道在GitHire上有多少人有五年的CoffeeScript经验，很显然我有很多地方需要向他们学习。”  </p>
<p>有人答道：“对的，这些人大概是在一边煮咖啡，一边写脚本”。  </p>
<p>确实，与Python和Ruby相比，CoffeeScript非常年轻，到现在才两年出头的时间。  </p>
<p>还清楚地记得，我是在了解<a href="http://zombie.labnotes.org/" target="_blank" rel="external">Zombie.js</a>时第一次接触到CoffeeScript。Zombie.js是一个用于客户端JavaScript测试的轻型框架，在我查看Zombie.js的源码时，我就被CoffeeScript的优雅和左边漂亮文档所吸引了 。  </p>
<p>谁说使用CoffeeScript不是如边煮咖啡边写脚本一样怡然自得呢？真的，这东西很酷！  </p>
<p>CoffeeScript之于JavaScript，就如Less或Sass之于CSS。它吸收了JavaScript语言的精华，并且添加了很多现代脚本语言（Python和Ruby等）所具有的特性。比如列表解析，字符串插值，参数列，吸收操作符，等等。我想CoffeeScript就是大师Douglas Crockford所想要的那种JavaScript子集 。它能够减少三分之一的代码量，换来的却是去除了语言怪癖，兼容所有引擎环境的JavaScript代码！其编译生成的JavaScript代码可读性很强，而且优雅程度不亚于直接写出的JavaScript代码，研究这些，你甚至能看到JavaScript在各方面的最佳实践。  </p>
<p>虽然CoffeeScript非常年轻，但因为<del>Ruby</del>Rails 3.1的直接集成和在Node.js开发方面的天然优势，CoffeeScript在很多方面都有了应用，比方说之前提到的浏览器模拟器Zombie.js，还有基于Express的高级Node.js开发框架<a href="http://zappajs.org/" target="_blank" rel="external">Zappa</a>，甚至使用CoffeeScript写成的PSD文件解析器<a href="http://meltingice.github.com/psd.js/" target="_blank" rel="external">psd.js</a> 。  </p>
<p>但无论CoffeeScript如何的优雅，如何的艺术，总之要记住它的金科玉律：“it’s just JavaScript!”</p>
<p>这句话是《深入浅出CoffeeScript》这本书的精髓。作者Trevor Burnham通过一个贯穿全书的5x5拼字游戏，从基础开始，通俗易懂的为我们讲解了CoffeeScript各方面的知识，如何与jQuery这类非常流行的类库完美集成，如何游刃有余的结合<a href="http://socket.io/" target="_blank" rel="external">Socket.IO</a>实现Node.js双通道异步通信。JavaScript能做的事情，CoffeeScript也可以，而且做起来更快，更优雅！  </p>
<p>想要站在JavaScript开发和Web开发的最前沿么？这本书正好适合你！  </p>
<p>感谢图灵公司引进了本书，给了我翻译该书的机会。感谢诸位编辑，傅志红老师，李松峰老师和李鑫老师，在翻译过程中给予我诸多帮助和鼓励。感谢图灵社区里的朋友，在阅读了样章之后给我了很多反馈。感谢大众点评网尤其是前端团队在翻译过程中给我的理解和支持。感谢Jeremy Ashkenas设计了这门优雅的语言，还要感谢本书的作者Trevor Burnham耐心为我解答我对原文中的疑问。  </p>
<p>最后还要感谢我的爸爸妈妈，女友吴竞男，谢谢你们的支持和理解。尤其是小吴，算是我译稿的第一个读者，谢谢你的诸多批评和建议。  </p>
<p>寸志<br>2012年2月27日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>The golden rule of CoffeeScript is: “It’s just JavaScript”.</em>——<a href="http://coffeescript.org/" target="_blank" rel="external">c]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[互联网的缔造者们：Brendan Eich与JavaScript]]></title>
    <link href="http://island205.com/2011/12/13/innovators-of-the-net-brendan-eich-and-javascript/"/>
    <id>http://island205.com/2011/12/13/innovators-of-the-net-brendan-eich-and-javascript/</id>
    <published>2011-12-12T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<p><em>本文译自：<a href="http://archive.today/ZoS4T" target="_blank" rel="external">INNOVATORS OF THE NET: BRENDAN EICH AND JAVASCRIPT</a>，最近因为别的事情从网上搜出来这篇文章，该篇文章是对 JavaScript 之父 Brendan 的采访翻译出来为大家揭开真实的 JavaScript 出生的故事。当然该文已与其他采访集结出版中译本为《编程人生》，请原谅该文翻译得比较粗糙。</em></p>
<blockquote>
<p>Brendan 的技术很牛，眼界宽广，表达能力也非常强，因此在 Netscape 内部他的话很有影响力。与他共事的工程师，在互联网上与他交流的开发者，甚至包括他遇见的高管们都非常赞赏他，赞赏他过人的才华、谦逊的态度和热心肠。</p>
</blockquote>
<p>1998年6月24日-作为Netscape网景公司企业软件事业部的执行副总裁，我有幸与一些互联网中最好的工程师共事，他们中有很多人在互联网开发标准和协议方面都有很大的贡献。在接下来几个月中，我将在我的TechVision专栏上分析这些领头羊在互联网方面所做的卓越工作。我第一位采访的“互联网缔造者”是Brendan Eich，他一手设计并实现了著名的JavaScript语言。</p>
<p>Brendan的技术很牛，眼界宽广，表达能力也非常强，因此在Netscape内部他的话很有影响力。与他共事的工程师，在互联网上与他交流的开发者，甚至包括他遇见的高管们都非常赞赏他，赞赏他过人的才华、谦逊的态度和热心肠。</p>
<p>他疯狂的浏览讨论组的新帖子，以了解大家是如何使用和讨论JavaScript的。他对于那些JavaScript在外界中所引发的新闻条目非常关心，感觉良好。在JavaScript标准出现之前，各种新的特性应用户的需要而相继开发出来。用不了多久，有时候就15分钟，Brendan的代码里就会出现一个非常天才的解决方案。</p>
<p>Brendan呆在电脑前就是一个恶魔，从舍不得浪费半点时间。如果同事因为某个问题打断了他与他交谈时，往往的结果就是，他会继续编程，收邮件，或者干脆同时与别人聊天，留给同事的只有半个侧脸。当谈话者要求他专心点，他就说他很忙，需要回去工作了。</p>
<p>Brendan在空闲时，会演奏古典钢琴或者体操。他还喜欢旅行，当然他更喜欢工作！——他很多假期都被填满了，因为他有很多预先打算的事情要做。</p>
<p>JavaScript于1995年发布，到现在已经是一个国际标准，旨在为开发提供一个更加容易的跨浏览器的动态HTML解决方案。</p>
<p>1998年，Brendan的杰出贡献使得他荣获了<a href="http://Builder.com" target="_blank" rel="external">Builder.com</a>公司该年的“互联网缔造者”大奖。下面就是Brendan和他的JavaScript。</p>
<h2 id="让网页动起来_Brendan_Eich，JavaScript之父**">让网页动起来 Brendan Eich，JavaScript之父**</h2><p><img src="http://pic3.zhimg.com/d6d07fe535354d5cc505c4632b5a906e_b.jpg" alt="Brendan Eich，JavaScript之父"></p>
<blockquote>
<p>内容建设不需要太高深。这不是什么只有专家或者牛逼哄哄的计算机科学家才能研究的深奥问题。这样有助于在内容创建和分享过程中节约成本有经济优势，。就如Netscape在网络建设中所做的一样。</p>
</blockquote>
<p>1995年4月，在SiliconGraphics工作了七年，又在MicroUnity System Enineering工作三年之后，我来到了现在的Netscape公司。Netscape公司一年前就开始找人开发一种脚本语言，希望能够运用到浏览器的网页里，让我网能够动起来。Java从First Person到Sun也经过了五个春秋，1994年是还为了能够应用到Web上而重构过。Netscape第一个获得了Java的认证，因此一个问题出现了：我们直接使用Java，还是令搞一个语言？</p>
<p>有的人极力主张使用Java，Java很好，很适合程序员写组件。但是还有更多的人只是写点脚本，或者直接把别人的脚本拷过来改一改就行。这些人不是专业的程序员，大部分时间都用来干别的事情，而不是敲代码。比如说网管，或者一些只写脚本的业余人员。如果他们想写点代码，他们只希望随便敲打两下键盘就行。最后，我们决定开发一门新语言，必须长得像Java，并且是脚本语言。</p>
<p>与其他所有语言一样，它也是从其他语言借鉴了很多东西。与1995年9月，它第一次跟随Navegator2.0 beta版一起发布，当时取名为LiveScript。紧接着，12月4号，公司与Sun公司一起宣布合作时更名为了JavaScript。</p>
<p>JavaScript吸引到了大量的开发者，因为人所要的东西仅仅是从HTML中迈出一步，使用一点代码是网页动起来——使东西移动，对用户的输入做出反应，或者改变颜色；弹出一个窗口；或者弹出一个对话框问个问题，只有回答了才能继续——这些事情HTML干不了，你需要编程语言，但是要足够简单，不需像Java或者C++这样复杂。</p>
<p>内容建设不需要太高深。这不是什么只有专家或者牛逼哄哄的计算机科学家才能研究的深奥问题。这样有助于在内容创建和分享过程中节约成本有经济优势，。就如Netscape在网络建设中所做的一样。</p>
<p>将JavaScript称作“将网页粘在一起的胶水”，说明了JavaScript短小易于使用，但是这还不够公平。胶水会变硬，但是JavaScript比胶水更动态，它可以创建响应让东西继续运转下去，把JavaScript称作催化剂更合适。</p>
<h2 id="互联网新标准">互联网新标准</h2><p>Navigator 2.0 beta版发布以后，JavaScript非常成功。因此，微软公司实现了兼容的语言跟进。于是有了创建一个标准的需求，上面写着：“它们应该按照这里规定的样子工作”，以便浏览器厂商能够都按照同样的标准来实现，web开发者开发的网页就能工作在各种可能的浏览器上。1996年8月，Navigator 3.0一发布之后，我们就着手以JavaScript为标准写一份草案提交给<a href="http://web.archive.org/web/20080208124612/http://www.ecma.ch/INDEX.htm" target="_blank" rel="external">欧洲计算机制造商协会（ECMA）</a>，它是国际通信标准的机构，总部设在瑞士日内瓦。ECMA在1997年6月通过了草案，并且同时作为ISO 标准。</p>
<p>现在该标准正式名称为ECMAScript。在Netscape，我们继续使用有品牌价值的“JavaScript”来称呼我们对ECMAScript的实现。这包括了一套扩展，没有任何冲突，但可以附加价值，所以它可以以这种方式基于标准进行一些创新。我想这是推动标准的正确方式。如委员会一样，将大家聚到一起互相争论打仗最终妥协满足所有人的需求这是做不出东西的。要做的话只有先创建一个原型，看它能进化成什么样子。</p>
<p>ECMA现在正在开会着手制定ECMAScript2.0标准，准备引入异常处理机制（一种显示处理错误的方式）还有几个其他的语言特性。这会使JavaScript更像一门编程语言——有点像Java，但是我觉得它应该悬崖勒马，不然会变得不好使用。</p>
<h2 id="DOM差异的衔接">DOM差异的衔接</h2><p>ECMAScript标准制定的是语言的核心标准，不管它在什么平台上有一样：在浏览器端，服务器端，甚至的多媒体制作工具中。当你把它放到浏览器中，那还存在另外一个层围绕着它，这一层用来处理HTML，处理浏览器窗口，处理对话框等等。这些并没有标准化。HTML标准的一部分，DOM（文档对象模型），现在正在由W3C标准化。该标准并没有以某个具体的实现为基础，它只是以一种更加普通更加抽象的方式来制定，这或许更好。今年的某个时候该标准会发布第一版。</p>
<p>内容制作者一直在抱怨，“我不得不为Netscape和IE不同的DOM模型写两遍代码。”我同意他们，他们有权利呐喊。开发者支出，如果一个函数不能同时工作在这两个浏览器上，他们就不会使用该函数。他们希望W3C的标准能够让动态网页开发走回正确的道路——这两浏览器在下一版是能够实现该标准。</p>
<p>在此期间，你希望你的JS代码能在同样HTML能力水平互相竞争的浏览器上实现功能，你可以写一段而外的JS——在不同的浏览器实现之上放一个薄薄的抽象层。这个普通的层会想搞清楚它运行在什么浏览器上，然后使用该浏览器可用的特性。因此，JavaScript可以扮演一座桥的角色，在没有统一的DOM标准出现之前。</p>
<p>例如，动态HTML包括两个W3C标准的支持，一是层叠样式表级别1（CSS1），它允许你格式化的HTML元素，另一个是层叠样式表定位（CSSP），它允许你放置、堆叠、隐藏并隐显示HTML元素。当前，开发者不得不在Netscape Navigator和IE中使用不同的DOM标准分别处理这些属性设置。但是，文档对象模型允许你使用JavaSript来设置元素的CSS1和CSSP属性。如果你现在写一个饱薄薄的抽象层，使用函数获取一个元素的属性值，然后进行浏览器检测，使用当前浏览器正确的DOM来设置。这个函数层，成为一个高层次的应用程序编程接口（API），你的代码可以随意调用，而不必担心其运行于什么浏览器之上。</p>
<p>为了节省开发者的时间，本周我们正在提供一个文档以及一个基础的跨浏览器的JavaScript代码层来解决这个问题。第一篇名为跨浏览器的JavaScript和DHTML的文档提供了一个浏览器兼容性问题以及如何解决这些问题的概述。第二篇文档如何使用JavaScript设置的两种浏览器的CSS1属性，并且提供了一个代码生成器，自动为你生成必要的JavaScript代码。第三份文档介绍了在这两种浏览器上如何使用JavaScript设置CSSP的属性，并提供了一个跨浏览器的API层。作为一个实际的例子是如何工作的，我们已经更新动态HTML的演示模板，支持Navigator 4.x和Internet Explorer 4.x中，并用它创建一个跨浏览器的DHTML的演示，任何人都可以使用教给别人。 有一个实例能够说明这是如何工作的，我们更新了动态HTML的演示模板示例，现在在Navigator4.x IE4.x上都能正常工作。我们还用它做了一个关于跨浏览器DHTML的介绍，这样任何人都可以用它来教别人了。另一个例子是Web Building 的主页，它利用了跨浏览器DHTML和面向对象的JavaScript创建了一个浮动菜单;这篇文章解释了它是如何工作，还有示例代码。</p>
<p>本着开放源代码的精神，我们鼓励开发人员提交改进的代码，可以并入到将来的版本中。事实上，跨浏览器API层的部分代码也是一个独立的开发者贡献的代码。</p>
<h2 id="COMMUNICATOR_SOURCE_CODE">COMMUNICATOR SOURCE CODE</h2><p>现在网景公司的<a href="http://web.archive.org/web/20080208124612/http://wp.netscape.com/columns/techvision/source.html" target="_blank" rel="external">Communicator source code</a>已经可用了。整个开源社区现在都可以推进JavaScript向前发展了。现在我为<a href="http://web.archive.org/web/20080208124612/http://www.mozilla.org/" target="_blank" rel="external">mozilla.org</a>工作 。这是一个伟大的团队，有很多牛人在一起开发JavaScript。现在我可以预见到的是，开源代码将方便人们走到一起发生一些美妙的事情。这真是太棒了，因为我可以说，“有人想使用JavaScript在浏览器中的东西，这不是以前编写脚本的自动化，而别人想在这里做类似的自动化排序。 这真的很棒，因为我敢说：”有的人想用一些以前没有的脚本来在浏览器中实现一些自动化的事情，而且也有其他人想要类似的东西。我们自动化、钩子或者脚本的统一理论是什么？“然后，我可以帮助做到这一点。我会尽力，以确保没有任何重复努力和语言是最小的，并没有得到与功能，不是绝对必要或重叠以某种方式相互缀满。 去哦会尽力确保避免一些重复的劳动。这语言是最小的，没有那些没有必要的功能，且功能间不会有互相重叠的部分。</p>
<p>我认为 <a href="http://mozilla.org" target="_blank" rel="external">mozilla.org</a> 成功是至关重要的。不只是为了Netscape，还为了开源社区，为了整个世界。反馈是关键的。雷蒙德， <a href="http://web.archive.org/web/20080208124612/http://www.opensource.org/" target="_blank" rel="external">开源软件</a>专家，他写了一个广泛讨论的文件，被称为 “大教堂和集市”，使得一个很好的点：软件主要是让你的代码的同行评审-不仅仅是质量保证，这是一个在审计过程中结束。 Eric Raymond，开源软件专家，他的一篇很有名的文章叫“大教堂和集市”指出：软件其实是对你的代码进行审查——不单单是QA，这是一个不断审视的过程。越多的双眼睛的审查，大多数情况下软件就越好，软件的品质就上去了。更多的目光投向帮助。这实际上在许多情况下，更好的软件。所以质量就上去了。</p>
<p>这是我喜欢做什么东西，拥有大量的受众，富有创造力，对人有帮助的事情。JavaScript能满足人们切实的需要，而且在其他领域也开始显露头角，比如说，Adobe公司将其加入到了Acrobat中。</p>
<p>我的上一个工作从来没有发布过产品，它是一项学要智力，充满挑战跨学科的研究。但是，除非产品可以交付到用户的手中，否则这样对于我来说没什么感觉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>本文译自：<a href="http://archive.today/ZoS4T" target="_blank" rel="external">INNOVATORS OF THE NET: BRENDAN EICH AND JAVASCRIPT</a>，最近因为别]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 的私有属性和方法]]></title>
    <link href="http://island205.com/2011/12/05/privite-member-in-javascript/"/>
    <id>http://island205.com/2011/12/05/privite-member-in-javascript/</id>
    <published>2011-12-04T16:00:00.000Z</published>
    <updated>2015-09-19T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<p>在JavaScript中谈私有属性和私有方法就是扯淡，”private”还杵在保留字的位置上，不知道什么时候提上来实现真正的私有。那今天咱就来讨论下如何以JS当前的特性来实现私有成员。</p>
<h2 id="闭包">闭包</h2><p>（比较枯燥，可以跳过本单元）JavaScript实现私有属性必须依赖闭包特性(可以先通过该链接补习)。下面也稍微补习下，看下面的例子：</p>
<pre><code><span class="keyword">var</span> uniqueId;
uniqueId = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
  <span class="keyword">var</span> index;
  index = <span class="number">0</span>;
  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(prefix)</span> </span>{
    <span class="keyword">return</span> prefix + <span class="string">"_"</span> + index++;
  };
})();
<span class="comment">//c_0</span>
<span class="built_in">console</span>.log(uniqueId(<span class="string">"c"</span>));
<span class="comment">//c_1</span>
<span class="built_in">console</span>.log(uniqueId(<span class="string">"c"</span>));
</code></pre><p>通常所说的或所看到的闭包就是这样子—— <code>(function(){})()</code>，但这不是它的全部或者是本质。在定义uniqueId这个函数的时候，我们使用了匿名函数表达式（请注意(function(){})是函数表达式）定义了一个函数且立即执行，把function(prefix){/<em>some code</em>/}作为返回值赋值给了quniqueId，此时这个 <code>function(prefix){/*some code*/}</code>已经生成了函数实例，在函数实例生成的过程中:</p>
<ul>
<li>通俗的讲将index这个外部函数定义的变量记住了（为什么要记住？没记住你让我怎么给你计算prefix+”_”+index的值嘛！）；</li>
<li>再次我们没法通过什么this.index或者someObj.index引用到index，改变其值了，(function(){})()这个一执行完，局部变量index在外面怎么调得到嘛；</li>
<li>怎么调得到，只能靠function(prefix){/<em>some code</em>/}，因为我们还能通过它间接的取得或改变index值。这就是闭包了。</li>
</ul>
<p>比较学术的解释：</p>
<ul>
<li>JS是词法作用域（就是程序看上去啥样就啥样）的，使用一个叫做[[scope]]的内部属性来标识每个执行上下文的作用域（我可以读写哪些变量啊，调用哪些哪些函数啊）；每个函数执行时都由该[scope]作用域加上活动对象来构成真实的执行上下文；</li>
<li>而这个执行上下文[[scope]]属性是在函数生成时就指定的了，不严格的讲为生成该函数时的执行上下文；</li>
<li>于是function(prefix){/<em>some code</em>/}生成时其内部的[[scope]]属性引用了(function(){})()执行上下文的scope链；该scope链即包含了该函数的[[scope]]和活动对象，且活动对象包含了index的定义引用；</li>
<li>GC的回收规则，没人用我我就是垃圾！因此uniqueId引用了function(prefix){/<em>some code</em>/}函数实例，而该函数实例的[[scope]]引用了(function(){})()执行期的scope链，其包含活动对象，即有index的引用；ok，index还有人引用它，它不是垃圾，因此闭包形成了，我们可以通过uniqueId函数间接的读取或者修改index。</li>
</ul>
<p>总结：其实学术解释和通俗解释一个意思，不过闭包其实是相对的，并不是我们不能修改index，只是需要间接的方法（是不是有点私有属性和私有方法的感觉）。</p>
<h2 id="私有属性和私有方法">私有属性和私有方法</h2><p>相对来说，构造单例对象的私有属性和方法都比较简单。</p>
<pre><code><span class="keyword">var</span> aira;
aira = (function () {
    <span class="keyword">var</span> __getName, __name;
    //private variable
    __name = <span class="string">"HTC mobile"</span>;
    //private <span class="keyword">method</span>
    __getName = function () {
        <span class="keyword">return</span> __name;
    };
    aira = {
        init: function () {
            //change private variable inner
            __name = <span class="string">"aira"</span>;
        },
        hello: function () {
            //execute private <span class="keyword">method</span> inner
            console.log(<span class="string">"hello,my name is "</span> + (__getName()));
        }
    };
    <span class="keyword">return</span> aira;
})();
aira.init();
//hello,my name <span class="keyword">is</span> aira
aira.hello();
</code></pre><p>使用双下划线”<strong>“表示私有；aira手机有一个私有属性</strong>name和私有方法<strong>getName；我们可以在init中修改</strong>name，在hello中调用__getName，且在闭包外面无法直接调用和修改这两个成员。我们做到了，这就是单例对象的私有属性和私有方法。<br>但是更确切的说，其实aira能够有私有属性和方法仅仅是因为它有私有的一个闭包，即init和hello成员的[[scope]]都引用了闭包的活动对象。</p>
<p>然而，一个构造函数（类）的私有属性和方法就么这么简单了。</p>
<pre><code><span class="keyword">var</span> Phone, aira;
<span class="comment">//wrap by function</span>
Phone = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>{
    <span class="keyword">var</span> phone;
    phone = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">var</span> __getName, __name;
        __name = name;
        __getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
            <span class="keyword">return</span> __name;
        };
        phone = {
            init: <span class="function"><span class="keyword">function</span> <span class="params">(number)</span> </span>{
                __name += <span class="string">"#"</span> + number;
            },
            hello: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
                <span class="built_in">console</span>.log(<span class="string">"hello,my name is "</span> + (__getName()));
            }
        };
        <span class="keyword">return</span> phone;
    })();
    <span class="keyword">return</span> phone;
};
aira1 = Phone(<span class="string">"aira"</span>);
aira1.init(<span class="number">1</span>);
<span class="comment">//hello,my name is aira#1</span>
aira1.hello();

aira2 = Phone(<span class="string">"aira"</span>);
aira2.init(<span class="number">2</span>);
<span class="comment">//hello,my name is aira#2</span>
aira2.hello();
</code></pre><p>我们先来简单的将单例对象的构造包裹一个函数，实现产生不同的对象。我们可以说Phone是一个类，因为它可以产生不同的对象，有类似的功能。同样aira1和aira2都有自己闭包，于是都有自己的私有属性和方法。</p>
<p>我想对自己说，别逗了你，这样就行啦？！JS中类的概念就是构造函数。</p>
<pre><code><span class="keyword">var</span> Phone, aira1, aira2;
Phone = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>{
    <span class="keyword">var</span> __getName, __name;
    __name = name;
    __getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">return</span> __name;
    };
    <span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span> <span class="params">(number)</span> </span>{
        __name += <span class="string">"#"</span> + number;
    };
    <span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="built_in">console</span>.log(<span class="string">"hello,my name is "</span> + (__getName()));
    };
};
aira1 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira1.init(<span class="number">1</span>);
<span class="comment">//hello,my name is aira#1</span>
aira1.hello();

aira2 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira2.init(<span class="number">1</span>);
<span class="comment">//hello,my name is aira#2</span>
aira2.hello();
</code></pre><p>Phone构造函数其实就是闭包的功能，每个Phone实例的init和hello都能引用其构造期间的形成的私有的<strong>name和</strong>getName。</p>
<p>真的，我已经无力回天了，每个实例必须由闭包产生私有属性和方法，因此只能在该闭包中定义公共方法暴露出来（比如说init和hello），这就意味着每次构造一个实例我们都必须生成init和hello的函数实例，这是多么的低效，因为JS有原型。</p>
<pre><code><span class="keyword">var</span> Phone, aira;
Phone = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>{
    <span class="keyword">var</span> __getName, __name;
    __name = name;
    __getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">return</span> __name;
    };
};
Phone.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">(number)</span> </span>{
    __name += <span class="string">"#"</span> + number;
};
Phone.prototype.hello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="string">"hello,my name is "</span> + (__getName()));
};
aira = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
</code></pre><p>上面的代码是错误的（在init中的__name是全局的，hello中的__getName方法因为不存在，所以会报错），这就是问题所在，能够引用私有属性和变量的公共方法必须在闭包中定义，然后暴露出来，然而原型方法并不能在闭包中定义。</p>
<h2 id="曲线救国">曲线救国</h2><h3 id="私有约定">私有约定</h3><pre><code><span class="keyword">var</span> Phone, aira1, aira2;
Phone = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>{
    <span class="comment">//"__" private variable</span>
    <span class="keyword">this</span>.__name = name;
};
Phone.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">(number)</span> </span>{
    <span class="keyword">this</span>.__name += <span class="string">"#"</span> + number;
};
Phone.prototype.hello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="string">"hello,my name is "</span> + (<span class="keyword">this</span>.__getName()));
};
<span class="comment">//"__" private method</span>
Phone.prototype.__getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="keyword">return</span> <span class="keyword">this</span>.__name;
};
aira1 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira1.init(<span class="number">1</span>);
<span class="comment">//hello,my name is aira#1</span>
aira1.hello();
aira2 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira2.init(<span class="number">2</span>);
<span class="comment">//hello,my name is aira#2</span>
aira2.hello();
</code></pre><p>以双下划线“__”表示私有，用最近看到的一代码注释来解释：“神奇，勿动”。<br>这是私有方法么？</p>
<pre><code><span class="keyword">var</span> Phone, aira1, aira2;
Phone = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="keyword">var</span> __getName, __name;
    __getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">return</span> __name;
    };
    Phone = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>{
        __name = name;
    };
    Phone.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">(number)</span> </span>{
        __name += <span class="string">"#"</span> + number;
    };
    Phone.prototype.hello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="built_in">console</span>.log(<span class="string">"hello,my name is "</span> + (__getName()));
    };
    <span class="keyword">return</span> Phone;
})();
aira1 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira1.init(<span class="number">1</span>);
<span class="comment">//hello,my name is aira#1 right!</span>
aira1.hello();
aira2 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira2.init(<span class="number">2</span>);
<span class="comment">//hello,my name is aira#2 right!</span>
aira2.hello();
<span class="comment">//hello,my name is aira#2 wrong!</span>
aira1.hello();
</code></pre><p>试图用闭包包住构造函数，形成闭包，但是得到的结果是__name和__getName其实都是类的私有属性，而不是实例的。aira1和aira2共用了__name和__getName。<br>再来确定下什么是私有属性和私有方法，即每个类实例都拥有且只能在类内访问的变量和函数。也就是说变量和方法只能由类的方法来调用。说到这里，我们或许可以尝试下，不让类外的方法调用类的私有方法。</p>
<pre><code><span class="keyword">var</span> inner, outer;
outer = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    inner();
};
inner = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);
};
<span class="comment">/*
  function(){
      inner();
  }
  */</span>
outer();
</code></pre><p>从arguments的callee中可获得当前的执行函数inner，而inner的动态属性caller指向了调用inner的外层函数outer，由此看来我们可以使用arguments.callee.caller来确定函数的执行环境，实现私有方法和属性。</p>
<pre><code><span class="keyword">var</span> Phone, aira1, aira2;
<span class="built_in">Function</span>.prototype.__public = <span class="function"><span class="keyword">function</span> <span class="params">(klass)</span> </span>{
    <span class="keyword">this</span>.klass = klass;
    <span class="keyword">return</span> <span class="keyword">this</span>;
};
<span class="built_in">Function</span>.prototype.__private = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="keyword">var</span> that;
    that = <span class="keyword">this</span>;
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">if</span> (<span class="keyword">this</span>.constructor === <span class="built_in">arguments</span>.callee.caller.klass) {
            <span class="keyword">return</span> that.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);
        } <span class="keyword">else</span> {
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">""</span> + that + <span class="string">" is a private method!"</span>);
        }
    };
};
Phone = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>{
    <span class="keyword">var</span> __name;
    __name = name;
    <span class="keyword">this</span>.__getName = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">return</span> __name;
    }).__private();
    <span class="keyword">this</span>.__setName = (<span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>{
        __name = name;
    }).__private();
};
Phone.prototype.init = (<span class="function"><span class="keyword">function</span> <span class="params">(number)</span> </span>{
    <span class="keyword">this</span>.__setName(<span class="keyword">this</span>.__getName() + <span class="string">"#"</span> + number);
}).__public(Phone);
Phone.prototype.hello = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="string">"hello,my name is "</span> + (<span class="keyword">this</span>.__getName()));
}).__public(Phone);
aira1 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira1.init(<span class="number">1</span>);
<span class="comment">//hello,my name is aira#1</span>
aira1.hello();
aira2 = <span class="keyword">new</span> Phone(<span class="string">"aira"</span>);
aira2.init(<span class="number">1</span>);
<span class="comment">//hello,my name is aira#2</span>
aira2.hello();
<span class="comment">//hello,my name is aira#1</span>
aira1.hello();

<span class="keyword">try</span> {
    aira1.__getName();
} <span class="keyword">catch</span> (e) {
<span class="comment">/*
Error Object
    message:"function () {return __name;} is a private method!"
*/</span>
    <span class="built_in">console</span>.log(e);
}
</code></pre><ul>
<li>请原谅我给Function原型上添加了两个方法__public和__private以此来实现私有方法的调用环境检测；</li>
<li>其次，我无法给私有属性添加检测，所以私有属性直接不可见，使用私有的get，set方法访问；</li>
<li>本身在aira1外部调用时我们还是能看到__getName和__setName方法，只是不能调用而已；</li>
<li>唯一好的一点是原型方法（公共方法）终于可以从构造函数闭包中解放出来。</li>
</ul>
<h2 id="参考">参考</h2><ul>
<li><a href="http://jibbering.com/faq/notes/closures/#clIRExSc" target="_blank" rel="external">Javascript Closures</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在JavaScript中谈私有属性和私有方法就是扯淡，”private”还杵在保留字的位置上，不知道什么时候提上来实现真正的私有。那今天咱就来讨论下如何以JS当前的特性来实现私有成员。</p>
<h2 id="闭包">闭包</h2><p>（比较枯燥，可以跳过本单元）Java]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 未来是什么样的？]]></title>
    <link href="http://island205.com/2011/12/02/the-future-of-javascript/"/>
    <id>http://island205.com/2011/12/02/the-future-of-javascript/</id>
    <published>2011-12-01T16:00:00.000Z</published>
    <updated>2015-03-19T00:11:07.000Z</updated>
    <content type="html"><![CDATA[<p>最近看了很多关于Javascript、ECMAScript、Node.js等等一些资料，且随着Javascript的广泛使用，V8带动JS引擎效率的提升，不禁会问：未来的Javascript是什么样子？</p>
<p>以下是我的愚见：</p>
<h2 id="语言特性">语言特性</h2><p>Javascript随着Ajax的概念的兴起，从2005年至今确实火了一大把，十多年前布兰登·艾克（Brendan Eich）十天搞定了它，应该想不到它如此的有影响力。然而Javascript将来走向何方，也完全看它自己的造化。</p>
<p>CoffeeScript最近也很火，被称作JS的语法糖；也可以看看Move语言，同样也是编译为JS。使用CoffeeScript或者是Move来编写JS程序会更加方便，代码清晰易读，模块化组织（Move包含客户端的模块化组织），一些Ruby/Python的语法与思想精髓在这两个语法糖里若影若现，这代表什么？看看Node.js吧，遵循CommonJS的模块组织标准，真的，模块化在客户端也非常需要！</p>
<p>从脚本加载器LABjs到模块加载器RequireJS甚至到玉伯SeaJS到其推出的模块组织工具，说明了什么？我们需要一个JS模块的标准，不单单服务端，在客户端我们也需要，我们需要jquery，我们就require(“jquery.js”)进来，这是趋势，这也是玉伯想干的事情，SeaJS不是一个简单的模块加载器，最终是一个客户端模块化的解决方案或者是事实标准。</p>
<p>因此，从语言特性方面看，我们需要JS在语法上，代码组织上更加完善，足以挑起重担。Brendan Eich在文章中六次提到CoffeeScript，他喜欢它；ECMAScript6草稿中有为客户端模块化进行思考；这就是我们需要的，就是运行在浏览器上的类似Ruby/Python的JS，而JS不会逊色于它们。</p>
<p>有人觉得CoffeeScript/Move这类语言没用，还要编译为JS，效率低下。但是我得说，它们是烈士，是JS发展方向上的先行者。当然随着JS的成熟，它们的使命也就达成了。</p>
<h2 id="执行速度">执行速度</h2><p>实话说，Javascript的执行速度真是慢的可怜。在社区里，有人叫喊，我们在意且需要的是它的执行速度。是的，我们需要，Javascript未来有hold住大型程序、3D游戏的能力。</p>
<p>谷歌chrome一出江湖就左突右闯，直接拿下了20%以上的市场份额，冲上老二的宝座，版本号如脱缰的野马，早将IE抛之脑后，搞得Firefox也耐不住寂寞，生生追赶。随着chrome横空出世的还有其JS引擎V8，它的JS执行速度还在继续优化，各浏览器厂商自觉提高自家的JS效率。基于V8的server-side JS Node.js高并发测评文章，抢眼不少。</p>
<p>我敢说，JS的执行速度在将来会提高一百倍，毫无压力。</p>
<p>标准的不断完善，JS语言趋于完备，加上高效的执行速度，不管是在server端还是客户端，它hold住。</p>
<h2 id="富API">富API</h2><p>全屏与鼠标锁定API正在出台，地理位置API等等，JS有很多很酷的API，由于浏览器的跨平台，HTML的多变，html5/css3的支持，多变的程序和功能不在话下。</p>
<p>将来，会有更多更酷的API出现，重力感应，加速度等等更多LBS物联网特性都将经过浏览器传递为JS API。</p>
<h2 id="跨平台">跨平台</h2><p>跨平台是什么概念，Java称自己垮平台，一份代码，到处执行。JS跨平台么？当然，各种系统，很多设备都有浏览器，这就是跨平台。想想在HP WebOS夭折的Palm，我们可以用JS和HTML5开发程序。windows8说我们也支持Nodejs，我们也可以用HTML5开发本地程序。JS将来会无处不在，无所不能，有木有？</p>
<h2 id="现在">现在</h2><p>展望的同时，看看现在。有没有觉得关于JS的好书已经很久没有出版了，不是没有优秀的人。之前大家发现了JS，现在JS在等待，等待下一次涅磐。现在JavaScript需要的不是解决浏览器的兼容问题，因为已经有jQuery等等；我们还在网络速度、浏览器渲染速度、JS文件并行加载、延迟加载、模块化做斗争，我们需要标准来解决问题；我们需要更多的是在标准之上、效率至上扩展和实现。这些问题搞定了，就有好书了。</p>
<p>因此，未来的JS将更易用，更普遍，更多的表现和空间将由它开启，谁说它与Java不像呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近看了很多关于Javascript、ECMAScript、Node.js等等一些资料，且随着Javascript的广泛使用，V8带动JS引擎效率的提升，不禁会问：未来的Javascript是什么样子？</p>
<p>以下是我的愚见：</p>
<h2 id="语言特性">语]]>
    </summary>
    
  </entry>
  
</feed>